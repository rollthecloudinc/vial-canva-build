"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcbdc_carbon_reporting_dashboard"] = self["webpackChunkcbdc_carbon_reporting_dashboard"] || []).push([["json_percent"],{

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSeries.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSeries.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunnelSeries: () => (/* binding */ FunnelSeries)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _percent_PercentSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../percent/PercentSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js\");\n/* harmony import */ var _core_util_Template__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Template */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js\");\n/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/List */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/List.js\");\n/* harmony import */ var _FunnelSlice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FunnelSlice */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSlice.js\");\n/* harmony import */ var _core_render_Tick__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/render/Tick */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js\");\n/* harmony import */ var _core_render_Label__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/render/Label */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Label.js\");\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/util/Type */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Creates a funnel series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\r\n * @important\r\n */\r\nclass FunnelSeries extends _percent_PercentSeries__WEBPACK_IMPORTED_MODULE_0__.PercentSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_tag\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"funnel\"\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slice links in series.\r\n         *\r\n         * `links.template` can also be used to configure slice links.\r\n         *\r\n         * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\r\n         */\r\n        Object.defineProperty(this, \"links\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this._makeLinks()\r\n        });\r\n        Object.defineProperty(this, \"_total\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_count\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_nextCoord\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_opposite\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n    }\r\n    _makeSlices() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _FunnelSlice__WEBPACK_IMPORTED_MODULE_3__.FunnelSlice._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\r\n        }, [this.slices.template]));\r\n    }\r\n    _makeLabels() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _core_render_Label__WEBPACK_IMPORTED_MODULE_5__.Label._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\r\n        }, [this.labels.template]));\r\n    }\r\n    _makeTicks() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _core_render_Tick__WEBPACK_IMPORTED_MODULE_6__.Tick._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\r\n        }, [this.ticks.template]));\r\n    }\r\n    _makeLinks() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _FunnelSlice__WEBPACK_IMPORTED_MODULE_3__.FunnelSlice._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\r\n        }, [this.links.template]));\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeLink(dataItem) {\r\n        const link = this.slicesContainer.children.push(this.links.make());\r\n        link._setDataItem(dataItem);\r\n        dataItem.set(\"link\", link);\r\n        this.links.push(link);\r\n        return link;\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        const slicesContainer = this.slicesContainer;\r\n        slicesContainer.setAll({ isMeasured: true, position: \"relative\", width: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.percent)(100), height: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.percent)(100) });\r\n        slicesContainer.onPrivate(\"width\", () => {\r\n            this.markDirtySize();\r\n        });\r\n        slicesContainer.onPrivate(\"height\", () => {\r\n            this.markDirtySize();\r\n        });\r\n        if (this.get(\"orientation\") == \"vertical\") {\r\n            this.set(\"layout\", this._root.horizontalLayout);\r\n        }\r\n        else {\r\n            this.set(\"layout\", this._root.verticalLayout);\r\n        }\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        const slice = this.makeSlice(dataItem);\r\n        slice._setDataItem(dataItem);\r\n        dataItem.set(\"slice\", slice);\r\n        this.makeLink(dataItem);\r\n        const label = this.makeLabel(dataItem);\r\n        label.on(\"x\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        label.on(\"y\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        this.makeTick(dataItem);\r\n        slice.events.on(\"positionchanged\", () => {\r\n            label.markDirty();\r\n        });\r\n        slice.events.on(\"boundschanged\", () => {\r\n            const dataItem = slice.dataItem;\r\n            if (dataItem) {\r\n                this._updateTick(dataItem);\r\n            }\r\n        });\r\n    }\r\n    _updateChildren() {\r\n        this._opposite = false;\r\n        if (this.children.indexOf(this.labelsContainer) == 0) {\r\n            this._opposite = true;\r\n        }\r\n        let total = 0;\r\n        let count = 0;\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_8__.each(this.dataItems, (dataItem) => {\r\n            const value = dataItem.get(\"value\");\r\n            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(value)) {\r\n                count++;\r\n                if (value > 0) {\r\n                    total += Math.abs(dataItem.get(\"valueWorking\", value) / value);\r\n                }\r\n                else {\r\n                    if (this.get(\"ignoreZeroValues\", false)) {\r\n                        count--;\r\n                    }\r\n                    else {\r\n                        if (dataItem.isHidden()) {\r\n                            count--;\r\n                        }\r\n                        else {\r\n                            total += 1;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        this._total = 1 / count * total;\r\n        this._count = count;\r\n        if (this.isDirty(\"alignLabels\")) {\r\n            this._fixLayout();\r\n        }\r\n        if (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\r\n            const slicesContainer = this.slicesContainer;\r\n            let h;\r\n            if (this.get(\"orientation\") == \"vertical\") {\r\n                h = slicesContainer.innerHeight();\r\n            }\r\n            else {\r\n                h = slicesContainer.innerWidth();\r\n            }\r\n            this._nextCoord = this.get(\"startLocation\", 0) * h;\r\n            this.markDirtyBounds();\r\n            let i = 0;\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_8__.each(this._dataItems, (dataItem) => {\r\n                this.updateLegendValue(dataItem);\r\n                dataItem.set(\"index\", i);\r\n                i++;\r\n                const slice = dataItem.get(\"slice\");\r\n                const tick = dataItem.get(\"tick\");\r\n                const label = dataItem.get(\"label\");\r\n                const link = dataItem.get(\"link\");\r\n                const color = dataItem.get(\"fill\");\r\n                slice._setDefault(\"fill\", color);\r\n                slice._setDefault(\"stroke\", color);\r\n                link._setDefault(\"fill\", color);\r\n                link._setDefault(\"stroke\", color);\r\n                const value = dataItem.get(\"value\");\r\n                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_9__.isNumber(value)) {\r\n                    if (value == 0 && this.get(\"ignoreZeroValues\")) {\r\n                        slice.setPrivate(\"visible\", false);\r\n                        tick.setPrivate(\"visible\", false);\r\n                        label.setPrivate(\"visible\", false);\r\n                    }\r\n                    else {\r\n                        slice.setPrivate(\"visible\", true);\r\n                        tick.setPrivate(\"visible\", true);\r\n                        label.setPrivate(\"visible\", true);\r\n                        this.decorateSlice(dataItem);\r\n                        if (this.isLast(dataItem)) {\r\n                            link.setPrivate(\"visible\", false);\r\n                        }\r\n                        else if (!dataItem.isHidden()) {\r\n                            link.setPrivate(\"visible\", true);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        super._updateChildren();\r\n    }\r\n    _fixLayout() {\r\n        const orientation = this.get(\"orientation\");\r\n        const labelsContainer = this.labelsContainer;\r\n        const labelsTemplate = this.labels.template;\r\n        if (this.get(\"alignLabels\")) {\r\n            labelsContainer.set(\"position\", \"relative\");\r\n            labelsContainer.setAll({ isMeasured: true });\r\n            if (orientation == \"vertical\") {\r\n                this.set(\"layout\", this._root.horizontalLayout);\r\n                labelsTemplate.setAll({ centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.p100, x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.p100 });\r\n            }\r\n            else {\r\n                this.set(\"layout\", this._root.verticalLayout);\r\n                labelsTemplate.setAll({ centerX: 0, x: 0 });\r\n            }\r\n        }\r\n        else {\r\n            labelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\r\n            if (orientation == \"vertical\") {\r\n                labelsContainer.setAll({ x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.p50 });\r\n                labelsTemplate.setAll({ centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.p50, x: 0 });\r\n            }\r\n            else {\r\n                labelsContainer.setAll({ y: _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.p50 });\r\n                labelsTemplate.setAll({ centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_7__.p50, y: 0 });\r\n            }\r\n        }\r\n        this.markDirtySize();\r\n    }\r\n    getNextValue(dataItem) {\r\n        let index = dataItem.get(\"index\");\r\n        let nextValue = dataItem.get(\"valueWorking\", 0);\r\n        if (index < this.dataItems.length - 1) {\r\n            let nextItem = this.dataItems[index + 1];\r\n            nextValue = nextItem.get(\"valueWorking\", 0);\r\n            if (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\r\n                return this.getNextValue(nextItem);\r\n            }\r\n        }\r\n        return nextValue;\r\n    }\r\n    isLast(dataItem) {\r\n        let index = dataItem.get(\"index\");\r\n        if (index == this.dataItems.length - 1) {\r\n            return true;\r\n        }\r\n        else {\r\n            for (let i = index + 1; i < this.dataItems.length; i++) {\r\n                if (!this.dataItems[i].isHidden()) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    decorateSlice(dataItem) {\r\n        const orientation = this.get(\"orientation\");\r\n        const slice = dataItem.get(\"slice\");\r\n        const label = dataItem.get(\"label\");\r\n        const link = dataItem.get(\"link\");\r\n        const slicesContainer = this.slicesContainer;\r\n        let maxWidth = slicesContainer.innerWidth();\r\n        let maxHeight = slicesContainer.innerHeight();\r\n        let maxSize = maxWidth;\r\n        if (orientation == \"horizontal\") {\r\n            maxSize = maxHeight;\r\n        }\r\n        const nextValue = this.getNextValue(dataItem);\r\n        const value = dataItem.get(\"value\", 0);\r\n        const workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\r\n        const bottomRatio = this.get(\"bottomRatio\", 0);\r\n        const valueHigh = this.getPrivate(\"valueHigh\", 0);\r\n        let d = 1;\r\n        if (value != 0) {\r\n            d = workingValue / Math.abs(value);\r\n        }\r\n        else {\r\n            if (dataItem.isHidden()) {\r\n                d = 0.000001;\r\n            }\r\n        }\r\n        if (this._nextCoord == Infinity) {\r\n            this._nextCoord = 0;\r\n        }\r\n        let topWidth = workingValue / valueHigh * maxSize;\r\n        let bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\r\n        slice.setAll({ topWidth, bottomWidth, orientation });\r\n        link.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\r\n        const startLocation = this.get(\"startLocation\", 0);\r\n        const endLocation = this.get(\"endLocation\", 1);\r\n        if (orientation == \"vertical\") {\r\n            let linkHeight = link.height() * d;\r\n            maxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\r\n            slice.set(\"y\", this._nextCoord);\r\n            let height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\r\n            slice.setAll({ height, x: maxWidth / 2 });\r\n            let labelY = this._nextCoord + height / 2;\r\n            label.set(\"y\", labelY);\r\n            this._nextCoord += height + linkHeight;\r\n            link.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\r\n        }\r\n        else {\r\n            let linkHeight = link.width() * d;\r\n            maxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\r\n            slice.set(\"x\", this._nextCoord);\r\n            let width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\r\n            slice.setAll({ width, y: maxHeight / 2 });\r\n            const labelX = this._nextCoord + width / 2;\r\n            label.set(\"x\", labelX);\r\n            this._nextCoord += width + linkHeight;\r\n            link.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\r\n        }\r\n    }\r\n    /**\r\n     * Hides series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    hideDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            hideDataItem: { get: () => super.hideDataItem }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {\r\n            dataItem.get(\"link\").hide(duration);\r\n            return _super.hideDataItem.call(this, dataItem, duration);\r\n        });\r\n    }\r\n    /**\r\n     * Shows series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    showDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            showDataItem: { get: () => super.showDataItem }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_10__.__awaiter)(this, void 0, void 0, function* () {\r\n            dataItem.get(\"link\").show(duration);\r\n            return _super.showDataItem.call(this, dataItem, duration);\r\n        });\r\n    }\r\n    _updateTick(dataItem) {\r\n        if (this.get(\"alignLabels\")) {\r\n            const tick = dataItem.get(\"tick\");\r\n            const label = dataItem.get(\"label\");\r\n            const slice = dataItem.get(\"slice\");\r\n            if (tick && slice && label) {\r\n                const labelsContainer = this.labelsContainer;\r\n                const slicesContainer = this.slicesContainer;\r\n                let tickLocation = tick.get(\"location\", 0.5);\r\n                const lcw = labelsContainer.width();\r\n                const lch = labelsContainer.height();\r\n                const pl = labelsContainer.get(\"paddingLeft\", 0);\r\n                const pr = labelsContainer.get(\"paddingRight\", 0);\r\n                const pt = labelsContainer.get(\"paddingTop\", 0);\r\n                const pb = labelsContainer.get(\"paddingBottom\", 0);\r\n                let p0 = { x: 0, y: 0 };\r\n                let p1 = { x: 0, y: 0 };\r\n                let p2 = { x: 0, y: 0 };\r\n                if (this._opposite) {\r\n                    tickLocation = 1 - tickLocation;\r\n                }\r\n                if (this.get(\"orientation\") == \"vertical\") {\r\n                    p0 = slice.getPoint(tickLocation, 0.5);\r\n                    p0.x += slice.x() + slicesContainer.x();\r\n                    p0.y += slice.y() + slicesContainer.y();\r\n                    if (this._opposite) {\r\n                        p1.x = lcw;\r\n                        p1.y = label.y();\r\n                        p2.x = lcw - pl;\r\n                        p2.y = p1.y;\r\n                    }\r\n                    else {\r\n                        p1.x = slicesContainer.x() + slicesContainer.width();\r\n                        p1.y = label.y();\r\n                        p2.x = p1.x + lcw - label.width() - pr;\r\n                        p2.y = p1.y;\r\n                    }\r\n                }\r\n                else {\r\n                    p0 = slice.getPoint(0.5, tickLocation);\r\n                    p0.x += slice.x() + slicesContainer.x();\r\n                    p0.y += slice.y() + slicesContainer.y();\r\n                    if (this._opposite) {\r\n                        p1.y = lch;\r\n                        p1.x = label.x();\r\n                        p2.y = lch - pt;\r\n                        p2.x = p1.x;\r\n                    }\r\n                    else {\r\n                        p1.y = slicesContainer.y() + slicesContainer.height();\r\n                        p1.x = label.x();\r\n                        p2.y = p1.y + lch - label.height() - pb;\r\n                        p2.x = p1.x;\r\n                    }\r\n                }\r\n                tick.set(\"points\", [p0, p1, p2]);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    disposeDataItem(dataItem) {\r\n        super.disposeDataItem(dataItem);\r\n        let link = dataItem.get(\"link\");\r\n        if (link) {\r\n            this.links.removeValue(link);\r\n            link.dispose();\r\n        }\r\n    }\r\n    _positionBullet(bullet) {\r\n        const sprite = bullet.get(\"sprite\");\r\n        if (sprite) {\r\n            const dataItem = sprite.dataItem;\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                const width = slice.width();\r\n                const height = slice.height();\r\n                const locationX = bullet.get(\"locationX\", 0.5);\r\n                const locationY = bullet.get(\"locationY\", 0.5);\r\n                let dx = 0;\r\n                let dy = 0;\r\n                if (this.get(\"orientation\") == \"horizontal\") {\r\n                    dy = height / 2;\r\n                }\r\n                else {\r\n                    dx = width / 2;\r\n                }\r\n                sprite.setAll({ x: slice.x() + width * locationX - dx, y: slice.y() - dy + height * locationY });\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(FunnelSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"FunnelSeries\"\r\n});\r\nObject.defineProperty(FunnelSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _percent_PercentSeries__WEBPACK_IMPORTED_MODULE_0__.PercentSeries.classNames.concat([FunnelSeries.className])\r\n});\r\n//# sourceMappingURL=FunnelSeries.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSeries.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSlice.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSlice.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunnelSlice: () => (/* binding */ FunnelSlice)\n/* harmony export */ });\n/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/render/Graphics */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js\");\n\r\n/**\r\n * Draws a slice for [[FunnelSeries]].\r\n */\r\nclass FunnelSlice extends _core_render_Graphics__WEBPACK_IMPORTED_MODULE_0__.Graphics {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_projectionDirty\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        Object.defineProperty(this, \"_tlx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_tly\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_trx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_try\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_blx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_bly\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_brx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_bry\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cprx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cplx\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cpry\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_cply\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.set(\"draw\", (display) => {\r\n            display.moveTo(this._tlx, this._tly);\r\n            display.lineTo(this._trx, this._try);\r\n            display.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\r\n            display.lineTo(this._blx, this._bly);\r\n            display.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\r\n        });\r\n    }\r\n    getPoint(locationX, locationY) {\r\n        let w = this.width();\r\n        let h = this.height();\r\n        const tw = this.get(\"topWidth\", 0);\r\n        const bw = this.get(\"bottomWidth\", 0);\r\n        if (this.get(\"orientation\") == \"vertical\") {\r\n            let tlx = -tw / 2;\r\n            let trx = tw / 2;\r\n            let brx = bw / 2;\r\n            let blx = -bw / 2;\r\n            let mlx = tlx + (blx - tlx) * locationY;\r\n            let mrx = trx + (brx - trx) * locationY;\r\n            return { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\r\n        }\r\n        else {\r\n            let tlx = -tw / 2;\r\n            let trx = tw / 2;\r\n            let brx = bw / 2;\r\n            let blx = -bw / 2;\r\n            let mlx = tlx + (blx - tlx) * locationX;\r\n            let mrx = trx + (brx - trx) * locationX;\r\n            return { x: w * locationX, y: mlx + (mrx - mlx) * locationY };\r\n        }\r\n    }\r\n    _changed() {\r\n        if (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\r\n            const w = this.width();\r\n            const h = this.height();\r\n            const tw = this.get(\"topWidth\", 0);\r\n            const bw = this.get(\"bottomWidth\", 0);\r\n            this._clear = true;\r\n            let ed = this.get(\"expandDistance\", 0);\r\n            if (this.get(\"orientation\") == \"vertical\") {\r\n                this._tlx = -tw / 2;\r\n                this._tly = 0;\r\n                this._trx = tw / 2;\r\n                this._try = 0;\r\n                this._brx = bw / 2;\r\n                this._bry = h;\r\n                this._blx = -bw / 2;\r\n                this._bly = h;\r\n                this._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\r\n                    this._cpry = this._try + 0.5 * h;\r\n                this._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\r\n                this._cply = this._tly + 0.5 * h;\r\n            }\r\n            else {\r\n                this._tly = -tw / 2;\r\n                this._tlx = 0;\r\n                this._try = tw / 2;\r\n                this._trx = 0;\r\n                this._bry = bw / 2;\r\n                this._brx = w;\r\n                this._bly = -bw / 2;\r\n                this._blx = w;\r\n                this._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\r\n                    this._cprx = this._trx + 0.5 * w;\r\n                this._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\r\n                this._cplx = this._tlx + 0.5 * w;\r\n            }\r\n        }\r\n        super._changed();\r\n    }\r\n}\r\nObject.defineProperty(FunnelSlice, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"FunnelSlice\"\r\n});\r\nObject.defineProperty(FunnelSlice, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_0__.Graphics.classNames.concat([FunnelSlice.className])\r\n});\r\n//# sourceMappingURL=FunnelSlice.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSlice.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PictorialStackedSeries.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PictorialStackedSeries.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PictorialStackedSeries: () => (/* binding */ PictorialStackedSeries)\n/* harmony export */ });\n/* harmony import */ var _PyramidSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PyramidSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PyramidSeries.js\");\n/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/render/Graphics */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js\");\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n\r\n\r\n\r\n/**\r\n * Creates a pictorial series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\r\n * @important\r\n */\r\nclass PictorialStackedSeries extends _PyramidSeries__WEBPACK_IMPORTED_MODULE_0__.PyramidSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_tag\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"pictorial\"\r\n        });\r\n        /**\r\n         * A [[Graphics]] element to used as a mask (shape) for the series.\r\n         *\r\n         * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\r\n         */\r\n        Object.defineProperty(this, \"seriesMask\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics.new(this._root, { position: \"absolute\", x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50, y: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50, centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50, centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50 })\r\n        });\r\n        Object.defineProperty(this, \"seriesGraphics\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.slicesContainer.children.push(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_1__.Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50, y: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50, centerX: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50, centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50 }))\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.set(\"topWidth\", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);\r\n        this.set(\"bottomWidth\", _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100);\r\n        this.set(\"valueIs\", \"height\");\r\n        this.slicesContainer.set(\"mask\", this.seriesMask);\r\n    }\r\n    _updateScale() {\r\n        let slicesContainer = this.slicesContainer;\r\n        let w = slicesContainer.innerWidth();\r\n        let h = slicesContainer.innerHeight();\r\n        let seriesMask = this.seriesMask;\r\n        let seriesGraphics = this.seriesGraphics;\r\n        let scale = seriesMask.get(\"scale\", 1);\r\n        const bounds = seriesMask.localBounds();\r\n        let mw = bounds.right - bounds.left;\r\n        let mh = bounds.bottom - bounds.top;\r\n        if (this.get(\"orientation\") == \"horizontal\") {\r\n            scale = w / mw;\r\n        }\r\n        else {\r\n            scale = h / mh;\r\n        }\r\n        if (scale != Infinity && scale != NaN) {\r\n            seriesMask.set(\"scale\", scale);\r\n            seriesMask.set(\"x\", w / 2);\r\n            seriesMask.set(\"y\", h / 2);\r\n            seriesGraphics.set(\"scale\", scale);\r\n            seriesGraphics.set(\"x\", w / 2);\r\n            seriesGraphics.set(\"y\", h / 2);\r\n        }\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        if (this.isDirty(\"svgPath\")) {\r\n            const svgPath = this.get(\"svgPath\");\r\n            this.seriesMask.set(\"svgPath\", svgPath);\r\n            this.seriesGraphics.set(\"svgPath\", svgPath);\r\n        }\r\n        this._updateScale();\r\n    }\r\n}\r\nObject.defineProperty(PictorialStackedSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PictorialStackedSeries\"\r\n});\r\nObject.defineProperty(PictorialStackedSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _PyramidSeries__WEBPACK_IMPORTED_MODULE_0__.PyramidSeries.classNames.concat([PictorialStackedSeries.className])\r\n});\r\n//# sourceMappingURL=PictorialStackedSeries.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PictorialStackedSeries.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PyramidSeries.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PyramidSeries.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PyramidSeries: () => (/* binding */ PyramidSeries)\n/* harmony export */ });\n/* harmony import */ var _FunnelSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FunnelSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSeries.js\");\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Type */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js\");\n\r\n\r\n\r\n\r\n/**\r\n * Creates a pyramid series for use in a [[SlicedChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\r\n * @important\r\n */\r\nclass PyramidSeries extends _FunnelSeries__WEBPACK_IMPORTED_MODULE_0__.FunnelSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_tag\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: \"pyramid\"\r\n        });\r\n        Object.defineProperty(this, \"_nextSize\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        this._nextSize = undefined;\r\n    }\r\n    decorateSlice(dataItem) {\r\n        const orientation = this.get(\"orientation\");\r\n        const slicesContainer = this.slicesContainer;\r\n        const slice = dataItem.get(\"slice\");\r\n        const label = dataItem.get(\"label\");\r\n        const link = dataItem.get(\"link\");\r\n        const valueIs = this.get(\"valueIs\", \"area\");\r\n        const sum = this.getPrivate(\"valueAbsoluteSum\", 0);\r\n        if (sum == 0) {\r\n            return;\r\n        }\r\n        const startLocation = this.get(\"startLocation\", 0);\r\n        const endLocation = this.get(\"endLocation\", 1);\r\n        const tw = this.get(\"topWidth\", 0);\r\n        const bw = this.get(\"bottomWidth\", _core_util_Percent__WEBPACK_IMPORTED_MODULE_1__.p100);\r\n        const workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\r\n        const value = dataItem.get(\"value\", 0);\r\n        let sliceHeight;\r\n        let sliceBottomWidth;\r\n        let pyramidHeight = slicesContainer.innerHeight();\r\n        let pyramidWidth = slicesContainer.innerWidth();\r\n        let linkWidth = link.width();\r\n        let linkHeight = link.height();\r\n        if (orientation == \"horizontal\") {\r\n            [pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\r\n            [linkWidth, linkHeight] = [linkHeight, linkWidth];\r\n        }\r\n        const center = pyramidWidth / 2;\r\n        let d = 1;\r\n        if (value != 0) {\r\n            d = workingValue / Math.abs(value);\r\n        }\r\n        else {\r\n            if (dataItem.isHidden()) {\r\n                d = 0.000001;\r\n            }\r\n        }\r\n        linkHeight *= d;\r\n        pyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\r\n        let topWidth = _core_util_Utils__WEBPACK_IMPORTED_MODULE_2__.relativeToValue(tw, pyramidWidth);\r\n        if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_3__.isNumber(this._nextSize)) {\r\n            this._nextSize = topWidth;\r\n        }\r\n        let bottomWidth = _core_util_Utils__WEBPACK_IMPORTED_MODULE_2__.relativeToValue(bw, pyramidWidth);\r\n        let sliceTopWidth = this._nextSize;\r\n        let angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\r\n        let c = Math.tan(Math.PI / 2 - angle);\r\n        if (c == 0) {\r\n            c = 0.00000001;\r\n        }\r\n        if (valueIs == \"area\") {\r\n            let totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\r\n            let square = totalSquare * workingValue / sum;\r\n            let s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\r\n            sliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\r\n            if (sliceHeight > 0) {\r\n                sliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\r\n            }\r\n            else {\r\n                sliceBottomWidth = sliceTopWidth;\r\n            }\r\n        }\r\n        else {\r\n            sliceHeight = pyramidHeight * workingValue / sum;\r\n            sliceBottomWidth = sliceTopWidth - sliceHeight * c;\r\n        }\r\n        let labelCoord = this._nextCoord + sliceHeight / 2;\r\n        let sliceX = center;\r\n        let sliceY = this._nextCoord;\r\n        let linkX = center;\r\n        let linkY = sliceY + sliceHeight;\r\n        if (orientation == \"vertical\") {\r\n            label.set(\"y\", labelCoord);\r\n            if (label.get(\"opacity\") > 0) {\r\n                this._rLabels.push({ label: label, y: labelCoord });\r\n            }\r\n            slice.set(\"height\", sliceHeight);\r\n        }\r\n        else {\r\n            label.set(\"x\", labelCoord);\r\n            if (label.get(\"opacity\") > 0) {\r\n                this._hLabels.push({ label: label, y: labelCoord });\r\n            }\r\n            [sliceX, sliceY] = [sliceY, sliceX];\r\n            [linkX, linkY] = [linkY, linkX];\r\n            slice.set(\"width\", sliceHeight);\r\n        }\r\n        slice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\r\n        link.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\r\n        this._nextSize = sliceBottomWidth;\r\n        this._nextCoord += sliceHeight + linkHeight;\r\n    }\r\n}\r\nObject.defineProperty(PyramidSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PyramidSeries\"\r\n});\r\nObject.defineProperty(PyramidSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _FunnelSeries__WEBPACK_IMPORTED_MODULE_0__.FunnelSeries.classNames.concat([PyramidSeries.className])\r\n});\r\n//# sourceMappingURL=PyramidSeries.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PyramidSeries.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/funnel/SlicedChart.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/funnel/SlicedChart.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SlicedChart: () => (/* binding */ SlicedChart)\n/* harmony export */ });\n/* harmony import */ var _percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../percent/PercentChart */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js\");\n\r\n/**\r\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\r\nclass SlicedChart extends _percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__.PercentChart {\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.seriesContainer.setAll({ isMeasured: true, layout: this._root.horizontalLayout });\r\n    }\r\n}\r\nObject.defineProperty(SlicedChart, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"SlicedChart\"\r\n});\r\nObject.defineProperty(SlicedChart, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__.PercentChart.classNames.concat([SlicedChart.className])\r\n});\r\n//# sourceMappingURL=SlicedChart.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/funnel/SlicedChart.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PercentChart: () => (/* binding */ PercentChart)\n/* harmony export */ });\n/* harmony import */ var _core_render_SerialChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/render/SerialChart */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/SerialChart.js\");\n/* harmony import */ var _PercentDefaultTheme__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PercentDefaultTheme */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentDefaultTheme.js\");\n\r\n\r\n/**\r\n * Base class for [[PieChart]].\r\n *\r\n * Also used for percent-based series, like [[FunnelSeries]], [[PyramidSeries]], etc.\r\n *\r\n * @important\r\n */\r\nclass PercentChart extends _core_render_SerialChart__WEBPACK_IMPORTED_MODULE_0__.SerialChart {\r\n    _afterNew() {\r\n        this._defaultThemes.push(_PercentDefaultTheme__WEBPACK_IMPORTED_MODULE_1__.PercentDefaultTheme.new(this._root));\r\n        super._afterNew();\r\n        this.chartContainer.children.push(this.seriesContainer);\r\n        this.seriesContainer.children.push(this.bulletsContainer);\r\n    }\r\n    _processSeries(series) {\r\n        super._processSeries(series);\r\n        this.seriesContainer.children.moveValue(this.bulletsContainer, this.seriesContainer.children.length - 1);\r\n    }\r\n}\r\nObject.defineProperty(PercentChart, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PercentChart\"\r\n});\r\nObject.defineProperty(PercentChart, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_render_SerialChart__WEBPACK_IMPORTED_MODULE_0__.SerialChart.classNames.concat([PercentChart.className])\r\n});\r\n//# sourceMappingURL=PercentChart.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentDefaultTheme.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentDefaultTheme.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PercentDefaultTheme: () => (/* binding */ PercentDefaultTheme)\n/* harmony export */ });\n/* harmony import */ var _core_Theme__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/Theme */ \"./node_modules/@amcharts/amcharts5/.internal/core/Theme.js\");\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n/* harmony import */ var _core_util_ColorSet__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/ColorSet */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/ColorSet.js\");\n/* harmony import */ var _themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../themes/DefaultTheme */ \"./node_modules/@amcharts/amcharts5/.internal/themes/DefaultTheme.js\");\n\r\n\r\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nclass PercentDefaultTheme extends _core_Theme__WEBPACK_IMPORTED_MODULE_0__.Theme {\r\n    setupDefaultRules() {\r\n        super.setupDefaultRules();\r\n        const ic = this._root.interfaceColors;\r\n        const r = this.rule.bind(this);\r\n        /**\r\n         * ========================================================================\r\n         * charts/percent\r\n         * ========================================================================\r\n         */\r\n        r(\"PercentSeries\").setAll({\r\n            legendLabelText: \"{category}\",\r\n            legendValueText: \"{valuePercentTotal.formatNumber('0.00p')}\",\r\n            colors: _core_util_ColorSet__WEBPACK_IMPORTED_MODULE_1__.ColorSet.new(this._root, {}),\r\n            width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100,\r\n            height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p100\r\n        });\r\n        /**\r\n         * ========================================================================\r\n         * charts/pie\r\n         * ========================================================================\r\n         */\r\n        r(\"PieChart\").setAll({\r\n            radius: (0,_core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.percent)(80),\r\n            startAngle: -90,\r\n            endAngle: 270\r\n        });\r\n        r(\"PieSeries\").setAll({\r\n            alignLabels: true,\r\n            startAngle: -90,\r\n            endAngle: 270\r\n        });\r\n        r(\"PieSeries\").states.create(\"hidden\", { endAngle: -90, opacity: 0 });\r\n        r(\"Slice\", [\"pie\"]).setAll({\r\n            position: \"absolute\",\r\n            isMeasured: false,\r\n            x: 0,\r\n            y: 0,\r\n            toggleKey: \"active\",\r\n            tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            strokeWidth: 1,\r\n            strokeOpacity: 1,\r\n            role: \"figure\",\r\n            lineJoin: \"round\"\r\n        });\r\n        r(\"Slice\", [\"pie\"]).states.create(\"active\", { shiftRadius: 20, scale: 1 });\r\n        r(\"Slice\", [\"pie\"]).states.create(\"hoverActive\", { scale: 1.04 });\r\n        r(\"Slice\", [\"pie\"]).states.create(\"hover\", { scale: 1.04 });\r\n        r(\"RadialLabel\", [\"pie\"]).setAll({\r\n            textType: \"aligned\",\r\n            radius: 10,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            paddingTop: 5,\r\n            paddingBottom: 5,\r\n            populateText: true\r\n        });\r\n        r(\"Tick\", [\"pie\"]).setAll({\r\n            location: 1\r\n        });\r\n        /**\r\n         * ========================================================================\r\n         * charts/funnel\r\n         * ========================================================================\r\n         */\r\n        r(\"SlicedChart\").setAll({\r\n            paddingLeft: 10,\r\n            paddingRight: 10,\r\n            paddingTop: 10,\r\n            paddingBottom: 10\r\n        });\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * charts/funnel: Funnel\r\n         * ------------------------------------------------------------------------\r\n         */\r\n        r(\"FunnelSeries\").setAll({\r\n            startLocation: 0,\r\n            endLocation: 1,\r\n            orientation: \"vertical\",\r\n            alignLabels: true,\r\n            sequencedInterpolation: true\r\n        });\r\n        r(\"FunnelSlice\").setAll({\r\n            interactive: true,\r\n            expandDistance: 0,\r\n            //tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n        });\r\n        r(\"FunnelSlice\").states.create(\"hover\", { expandDistance: 0.15 });\r\n        r(\"Label\", [\"funnel\"]).setAll({\r\n            populateText: true,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50\r\n        });\r\n        r(\"Label\", [\"funnel\", \"horizontal\"]).setAll({\r\n            centerX: 0,\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50,\r\n            rotation: -90\r\n        });\r\n        // Class: Label\r\n        r(\"Label\", [\"funnel\", \"vertical\"]).setAll({\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50,\r\n            centerX: 0\r\n        });\r\n        r(\"Tick\", [\"funnel\"]).setAll({\r\n            location: 1\r\n        });\r\n        r(\"FunnelSlice\", [\"funnel\", \"link\"]).setAll({\r\n            fillOpacity: 0.5,\r\n            strokeOpacity: 0,\r\n            expandDistance: -0.1\r\n        });\r\n        r(\"FunnelSlice\", [\"funnel\", \"link\", \"vertical\"]).setAll({\r\n            height: 10,\r\n        });\r\n        r(\"FunnelSlice\", [\"funnel\", \"link\", \"horizontal\"]).setAll({\r\n            width: 10\r\n        });\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * charts/funnel: Pyramid\r\n         * ------------------------------------------------------------------------\r\n         */\r\n        r(\"PyramidSeries\").setAll({\r\n            valueIs: \"area\"\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\", \"link\"]).setAll({\r\n            fillOpacity: 0.5\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\", \"link\", \"vertical\"]).setAll({\r\n            height: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\", \"link\", \"horizontal\"]).setAll({\r\n            width: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\"]).setAll({\r\n            interactive: true,\r\n            expandDistance: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pyramid\"]).states.create(\"hover\", { expandDistance: 0.15 });\r\n        r(\"Label\", [\"pyramid\"]).setAll({\r\n            populateText: true,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50\r\n        });\r\n        r(\"Label\", [\"pyramid\", \"horizontal\"]).setAll({\r\n            centerX: 0,\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50,\r\n            rotation: -90\r\n        });\r\n        r(\"Label\", [\"pyramid\", \"vertical\"]).setAll({\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50,\r\n            centerX: 0\r\n        });\r\n        r(\"Tick\", [\"pyramid\"]).setAll({\r\n            location: 1\r\n        });\r\n        /**\r\n         * ------------------------------------------------------------------------\r\n         * charts/funnel: Pictorial\r\n         * ------------------------------------------------------------------------\r\n         */\r\n        // Class: FunnelSlice\r\n        r(\"FunnelSlice\", [\"pictorial\"]).setAll({\r\n            interactive: true,\r\n            tooltipText: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\"\r\n        });\r\n        r(\"Label\", [\"pictorial\"]).setAll({\r\n            populateText: true,\r\n            text: \"{category}: {valuePercentTotal.formatNumber('0.00p')}\",\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50\r\n        });\r\n        r(\"Label\", [\"pictorial\", \"horizontal\"]).setAll({\r\n            centerX: 0,\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50,\r\n            rotation: -90\r\n        });\r\n        r(\"Label\", [\"pictorial\", \"vertical\"]).setAll({\r\n            centerY: _core_util_Percent__WEBPACK_IMPORTED_MODULE_2__.p50,\r\n            centerX: 0\r\n        });\r\n        r(\"FunnelSlice\", [\"pictorial\", \"link\"]).setAll({\r\n            fillOpacity: 0.5,\r\n            width: 0,\r\n            height: 0\r\n        });\r\n        r(\"Tick\", [\"pictorial\"]).setAll({\r\n            location: 0.5\r\n        });\r\n        {\r\n            const rule = r(\"Graphics\", [\"pictorial\", \"background\"]);\r\n            rule.setAll({\r\n                fillOpacity: 0.2\r\n            });\r\n            (0,_themes_DefaultTheme__WEBPACK_IMPORTED_MODULE_3__.setColor)(rule, \"fill\", ic, \"alternativeBackground\");\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=PercentDefaultTheme.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentDefaultTheme.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PercentSeries: () => (/* binding */ PercentSeries)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_render_Series__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/render/Series */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Series.js\");\n/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/render/Container */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js\");\n/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/render/Graphics */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Type */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A base class for any percent chart series.\r\n */\r\nclass PercentSeries extends _core_render_Series__WEBPACK_IMPORTED_MODULE_0__.Series {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"slicesContainer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container.new(this._root, { position: \"absolute\", isMeasured: false }))\r\n        });\r\n        Object.defineProperty(this, \"labelsContainer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container.new(this._root, { position: \"absolute\", isMeasured: false }))\r\n        });\r\n        Object.defineProperty(this, \"ticksContainer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_1__.Container.new(this._root, { position: \"absolute\", isMeasured: false }))\r\n        });\r\n        Object.defineProperty(this, \"_lLabels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"_rLabels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"_hLabels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slices in series.\r\n         *\r\n         * `slices.template` can also be used to configure slices.\r\n         */\r\n        Object.defineProperty(this, \"slices\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this._makeSlices()\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slice labels in series.\r\n         *\r\n         * `labels.template` can also be used to configure slice labels.\r\n         */\r\n        Object.defineProperty(this, \"labels\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this._makeLabels()\r\n        });\r\n        /**\r\n         * A [[ListTemplate]] of all slice ticks in series.\r\n         *\r\n         * `ticks.template` can also be used to configure slice ticks.\r\n         */\r\n        Object.defineProperty(this, \"ticks\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this._makeTicks()\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeSlice(dataItem) {\r\n        const slice = this.slicesContainer.children.push(this.slices.make());\r\n        slice.on(\"fill\", () => {\r\n            this.updateLegendMarker(dataItem);\r\n        });\r\n        slice.on(\"stroke\", () => {\r\n            this.updateLegendMarker(dataItem);\r\n        });\r\n        slice._setDataItem(dataItem);\r\n        dataItem.set(\"slice\", slice);\r\n        this.slices.push(slice);\r\n        return slice;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeLabel(dataItem) {\r\n        const label = this.labelsContainer.children.push(this.labels.make());\r\n        label._setDataItem(dataItem);\r\n        dataItem.set(\"label\", label);\r\n        this.labels.push(label);\r\n        return label;\r\n    }\r\n    _shouldMakeBullet(dataItem) {\r\n        if (dataItem.get(\"value\") != null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    makeTick(dataItem) {\r\n        const tick = this.ticksContainer.children.push(this.ticks.make());\r\n        tick._setDataItem(dataItem);\r\n        dataItem.set(\"tick\", tick);\r\n        this.ticks.push(tick);\r\n        return tick;\r\n    }\r\n    _afterNew() {\r\n        this.fields.push(\"category\", \"fill\");\r\n        super._afterNew();\r\n    }\r\n    _onDataClear() {\r\n        const colors = this.get(\"colors\");\r\n        if (colors) {\r\n            colors.reset();\r\n        }\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        this._lLabels = [];\r\n        this._rLabels = [];\r\n        this._hLabels = [];\r\n        if (this._valuesDirty) {\r\n            let sum = 0;\r\n            let absSum = 0;\r\n            let valueHigh = 0;\r\n            let valueLow = Infinity;\r\n            let count = 0;\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._dataItems, (dataItem) => {\r\n                let valueWorking = dataItem.get(\"valueWorking\", 0);\r\n                sum += valueWorking;\r\n                absSum += Math.abs(valueWorking);\r\n            });\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._dataItems, (dataItem) => {\r\n                let value = dataItem.get(\"valueWorking\", 0);\r\n                if (value > valueHigh) {\r\n                    valueHigh = value;\r\n                }\r\n                if (value < valueLow) {\r\n                    valueLow = value;\r\n                }\r\n                count++;\r\n                let percentTotal = value / absSum;\r\n                if (absSum == 0) {\r\n                    percentTotal = 0;\r\n                }\r\n                dataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\r\n            });\r\n            this.setPrivateRaw(\"valueLow\", valueLow);\r\n            this.setPrivateRaw(\"valueHigh\", valueHigh);\r\n            this.setPrivateRaw(\"valueSum\", sum);\r\n            this.setPrivateRaw(\"valueAverage\", sum / count);\r\n            this.setPrivateRaw(\"valueAbsoluteSum\", absSum);\r\n        }\r\n    }\r\n    /**\r\n     * Shows hidden series.\r\n     *\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Animation promise\r\n     */\r\n    show(duration) {\r\n        const _super = Object.create(null, {\r\n            show: { get: () => super.show }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {\r\n            let promises = [];\r\n            promises.push(_super.show.call(this, duration));\r\n            promises.push(this._sequencedShowHide(true, duration));\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * Hide whole series.\r\n     *\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Animation promise\r\n     */\r\n    hide(duration) {\r\n        const _super = Object.create(null, {\r\n            hide: { get: () => super.hide }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {\r\n            let promises = [];\r\n            promises.push(_super.hide.call(this, duration));\r\n            promises.push(this._sequencedShowHide(false, duration));\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _updateChildren() {\r\n        super._updateChildren();\r\n        if (this._valuesDirty) {\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._dataItems, (dataItem) => {\r\n                dataItem.get(\"label\").text.markDirtyText();\r\n            });\r\n        }\r\n        if (this.isDirty(\"legendLabelText\") || this.isDirty(\"legendValueText\")) {\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this._dataItems, (dataItem) => {\r\n                this.updateLegendValue(dataItem);\r\n            });\r\n        }\r\n        this._arrange();\r\n    }\r\n    _arrange() {\r\n        this._arrangeDown(this._lLabels);\r\n        this._arrangeUp(this._lLabels);\r\n        this._arrangeDown(this._rLabels);\r\n        this._arrangeUp(this._rLabels);\r\n        this._arrangeLeft(this._hLabels);\r\n        this._arrangeRight(this._hLabels);\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(this.dataItems, (dataItem) => {\r\n            this._updateTick(dataItem);\r\n        });\r\n    }\r\n    _afterChanged() {\r\n        super._afterChanged();\r\n        this._arrange();\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        if (dataItem.get(\"fill\") == null) {\r\n            let colors = this.get(\"colors\");\r\n            if (colors) {\r\n                dataItem.setRaw(\"fill\", colors.next());\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Shows series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    showDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            showDataItem: { get: () => super.showDataItem }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {\r\n            const promises = [_super.showDataItem.call(this, dataItem, duration)];\r\n            if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(duration)) {\r\n                duration = this.get(\"stateAnimationDuration\", 0);\r\n            }\r\n            const easing = this.get(\"stateAnimationEasing\");\r\n            let value = dataItem.get(\"value\");\r\n            const animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\r\n            if (animation) {\r\n                promises.push(animation.waitForStop());\r\n            }\r\n            const tick = dataItem.get(\"tick\");\r\n            if (tick) {\r\n                promises.push(tick.show(duration));\r\n            }\r\n            const label = dataItem.get(\"label\");\r\n            if (label) {\r\n                promises.push(label.show(duration));\r\n            }\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                promises.push(slice.show(duration));\r\n            }\r\n            if (slice.get(\"active\")) {\r\n                slice.states.applyAnimate(\"active\");\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * Hides series's data item.\r\n     *\r\n     * @param   dataItem  Data item\r\n     * @param   duration  Animation duration in milliseconds\r\n     * @return            Promise\r\n     */\r\n    hideDataItem(dataItem, duration) {\r\n        const _super = Object.create(null, {\r\n            hideDataItem: { get: () => super.hideDataItem }\r\n        });\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_3__.__awaiter)(this, void 0, void 0, function* () {\r\n            const promises = [_super.hideDataItem.call(this, dataItem, duration)];\r\n            const hiddenState = this.states.create(\"hidden\", {});\r\n            if (!_core_util_Type__WEBPACK_IMPORTED_MODULE_4__.isNumber(duration)) {\r\n                duration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\r\n            }\r\n            const easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\r\n            const animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\r\n            if (animation) {\r\n                promises.push(animation.waitForStop());\r\n            }\r\n            const tick = dataItem.get(\"tick\");\r\n            if (tick) {\r\n                promises.push(tick.hide(duration));\r\n            }\r\n            const label = dataItem.get(\"label\");\r\n            if (label) {\r\n                promises.push(label.hide(duration));\r\n            }\r\n            const slice = dataItem.get(\"slice\");\r\n            slice.hideTooltip();\r\n            if (slice) {\r\n                promises.push(slice.hide(duration));\r\n            }\r\n            yield Promise.all(promises);\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    disposeDataItem(dataItem) {\r\n        super.disposeDataItem(dataItem);\r\n        let label = dataItem.get(\"label\");\r\n        if (label) {\r\n            this.labels.removeValue(label);\r\n            label.dispose();\r\n        }\r\n        let tick = dataItem.get(\"tick\");\r\n        if (tick) {\r\n            this.ticks.removeValue(tick);\r\n            tick.dispose();\r\n        }\r\n        let slice = dataItem.get(\"slice\");\r\n        if (slice) {\r\n            this.slices.removeValue(slice);\r\n            slice.dispose();\r\n        }\r\n    }\r\n    /**\r\n     * Triggers hover on a series data item.\r\n     *\r\n     * @since 5.0.7\r\n     * @param  dataItem  Target data item\r\n     */\r\n    hoverDataItem(dataItem) {\r\n        const slice = dataItem.get(\"slice\");\r\n        if (slice && !slice.isHidden()) {\r\n            slice.hover();\r\n        }\r\n    }\r\n    /**\r\n     * Triggers un-hover on a series data item.\r\n     *\r\n     * @since 5.0.7\r\n     * @param  dataItem  Target data item\r\n     */\r\n    unhoverDataItem(dataItem) {\r\n        const slice = dataItem.get(\"slice\");\r\n        if (slice) {\r\n            slice.unhover();\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    updateLegendMarker(dataItem) {\r\n        if (dataItem) {\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                const legendDataItem = dataItem.get(\"legendDataItem\");\r\n                if (legendDataItem) {\r\n                    const markerRectangle = legendDataItem.get(\"markerRectangle\");\r\n                    _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(_core_render_Graphics__WEBPACK_IMPORTED_MODULE_5__.visualSettings, (setting) => {\r\n                        if (slice.get(setting) != null) {\r\n                            markerRectangle.set(setting, slice.get(setting));\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _arrangeDown(labels) {\r\n        if (labels) {\r\n            let next = this._getNextDown();\r\n            labels.sort((a, b) => {\r\n                if (a.y > b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y < b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelTop = bounds.top;\r\n                if (l.y + labelTop < next) {\r\n                    l.y = next - labelTop;\r\n                }\r\n                l.label.set(\"y\", l.y);\r\n                next = l.y + bounds.bottom;\r\n            });\r\n        }\r\n    }\r\n    _getNextUp() {\r\n        return this.labelsContainer.maxHeight();\r\n    }\r\n    _getNextDown() {\r\n        return 0;\r\n    }\r\n    _arrangeUp(labels) {\r\n        if (labels) {\r\n            let next = this._getNextUp();\r\n            labels.sort((a, b) => {\r\n                if (a.y < b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y > b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelBottom = bounds.bottom;\r\n                if (l.y + labelBottom > next) {\r\n                    l.y = next - labelBottom;\r\n                }\r\n                l.label.set(\"y\", l.y);\r\n                next = l.y + bounds.top;\r\n            });\r\n        }\r\n    }\r\n    _arrangeRight(labels) {\r\n        if (labels) {\r\n            let next = 0;\r\n            labels.sort((a, b) => {\r\n                if (a.y > b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y < b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelLeft = bounds.left;\r\n                if (l.y + labelLeft < next) {\r\n                    l.y = next - labelLeft;\r\n                }\r\n                l.label.set(\"x\", l.y);\r\n                next = l.y + bounds.right;\r\n            });\r\n        }\r\n    }\r\n    _arrangeLeft(labels) {\r\n        if (labels) {\r\n            let next = this.labelsContainer.maxWidth();\r\n            labels.sort((a, b) => {\r\n                if (a.y < b.y) {\r\n                    return 1;\r\n                }\r\n                else if (a.y > b.y) {\r\n                    return -1;\r\n                }\r\n                else {\r\n                    return 0;\r\n                }\r\n            });\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_2__.each(labels, (l) => {\r\n                const bounds = l.label.adjustedLocalBounds();\r\n                let labelRight = bounds.right;\r\n                if (l.y + labelRight > next) {\r\n                    l.y = next - labelRight;\r\n                }\r\n                l.label.set(\"x\", l.y);\r\n                next = l.y + bounds.left;\r\n            });\r\n        }\r\n    }\r\n    _updateSize() {\r\n        super._updateSize();\r\n        this.markDirty();\r\n    }\r\n    _updateTick(_dataItem) {\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            chart.series.removeValue(this);\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(PercentSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PercentSeries\"\r\n});\r\nObject.defineProperty(PercentSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_render_Series__WEBPACK_IMPORTED_MODULE_0__.Series.classNames.concat([PercentSeries.className])\r\n});\r\n//# sourceMappingURL=PercentSeries.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieChart.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieChart.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PieChart: () => (/* binding */ PieChart)\n/* harmony export */ });\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n/* harmony import */ var _percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../percent/PercentChart */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n/* harmony import */ var _core_util_Math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Math */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Creates a pie chart.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\r\nclass PieChart extends _percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__.PercentChart {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_maxRadius\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 1\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.seriesContainer.setAll({ x: _core_util_Percent__WEBPACK_IMPORTED_MODULE_1__.p50, y: _core_util_Percent__WEBPACK_IMPORTED_MODULE_1__.p50 });\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        const chartContainer = this.chartContainer;\r\n        const w = chartContainer.innerWidth();\r\n        const h = chartContainer.innerHeight();\r\n        const startAngle = this.get(\"startAngle\", 0);\r\n        const endAngle = this.get(\"endAngle\", 0);\r\n        const innerRadius = this.get(\"innerRadius\");\r\n        let bounds = _core_util_Math__WEBPACK_IMPORTED_MODULE_2__.getArcBounds(0, 0, startAngle, endAngle, 1);\r\n        const wr = w / (bounds.right - bounds.left);\r\n        const hr = h / (bounds.bottom - bounds.top);\r\n        let innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\r\n        if (innerRadius instanceof _core_util_Percent__WEBPACK_IMPORTED_MODULE_1__.Percent) {\r\n            let value = innerRadius.value;\r\n            let mr = Math.min(wr, hr);\r\n            value = Math.max(mr * value, mr - Math.min(h, w)) / mr;\r\n            innerBounds = _core_util_Math__WEBPACK_IMPORTED_MODULE_2__.getArcBounds(0, 0, startAngle, endAngle, value);\r\n            this.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\r\n        }\r\n        bounds = _core_util_Math__WEBPACK_IMPORTED_MODULE_2__.mergeBounds([bounds, innerBounds]);\r\n        const prevRadius = this._maxRadius;\r\n        this._maxRadius = Math.min(wr, hr);\r\n        const radius = _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\r\n        this.seriesContainer.setAll({\r\n            dy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\r\n        });\r\n        if (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\r\n            this.series.each((series) => {\r\n                series._markDirtyKey(\"startAngle\");\r\n            });\r\n        }\r\n        if (this.isDirty(\"innerRadius\") || this.isDirty(\"radius\")) {\r\n            this.series.each((series) => {\r\n                series._markDirtyKey(\"innerRadius\");\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Returns outer radius in pixels.\r\n     *\r\n     * If optional series parameter is passed in, it will return outer radius\r\n     * of that particular series.\r\n     *\r\n     * @param   series  Series\r\n     * @return          Radius in pixels\r\n     */\r\n    radius(series) {\r\n        let radius = _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\r\n        let innerRadius = _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.relativeToValue(this.get(\"innerRadius\", 0), radius);\r\n        if (series) {\r\n            let index = this.series.indexOf(series);\r\n            let length = this.series.length;\r\n            let seriesRadius = series.get(\"radius\");\r\n            if (seriesRadius != null) {\r\n                return innerRadius + _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.relativeToValue(seriesRadius, radius - innerRadius);\r\n            }\r\n            else {\r\n                return innerRadius + (radius - innerRadius) / length * (index + 1);\r\n            }\r\n        }\r\n        return radius;\r\n    }\r\n    /**\r\n     * Returns inner radius in pixels.\r\n     *\r\n     * If optional series parameter is passed in, it will return inner radius\r\n     * of that particular series.\r\n     *\r\n     * @param   series  Series\r\n     * @return          Radius in pixels\r\n     */\r\n    innerRadius(series) {\r\n        const radius = this.radius();\r\n        let innerRadius = _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.relativeToValue(this.get(\"innerRadius\", 0), radius);\r\n        if (innerRadius < 0) {\r\n            innerRadius = radius + innerRadius;\r\n        }\r\n        if (series) {\r\n            let index = this.series.indexOf(series);\r\n            let length = this.series.length;\r\n            let seriesInnerRadius = series.get(\"innerRadius\");\r\n            if (seriesInnerRadius != null) {\r\n                return innerRadius + _core_util_Utils__WEBPACK_IMPORTED_MODULE_3__.relativeToValue(seriesInnerRadius, radius - innerRadius);\r\n            }\r\n            else {\r\n                return innerRadius + (radius - innerRadius) / length * index;\r\n            }\r\n        }\r\n        return innerRadius;\r\n    }\r\n}\r\nObject.defineProperty(PieChart, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PieChart\"\r\n});\r\nObject.defineProperty(PieChart, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__.PercentChart.classNames.concat([PieChart.className])\r\n});\r\n//# sourceMappingURL=PieChart.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieChart.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieSeries.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieSeries.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PieSeries: () => (/* binding */ PieSeries)\n/* harmony export */ });\n/* harmony import */ var _percent_PercentSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../percent/PercentSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js\");\n/* harmony import */ var _core_util_Template__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Template */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Template.js\");\n/* harmony import */ var _core_render_Slice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/render/Slice */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Slice.js\");\n/* harmony import */ var _core_render_Tick__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/render/Tick */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Tick.js\");\n/* harmony import */ var _core_render_RadialLabel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/render/RadialLabel */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/RadialLabel.js\");\n/* harmony import */ var _core_util_List__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/List */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/List.js\");\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n/* harmony import */ var _core_util_Math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../core/util/Math */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Creates a series for a [[PieChart]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\r\n * @important\r\n */\r\nclass PieSeries extends _percent_PercentSeries__WEBPACK_IMPORTED_MODULE_0__.PercentSeries {\r\n    _makeSlices() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _core_render_Slice__WEBPACK_IMPORTED_MODULE_3__.Slice._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\r\n        }, [this.slices.template]));\r\n    }\r\n    _makeLabels() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _core_render_RadialLabel__WEBPACK_IMPORTED_MODULE_5__.RadialLabel._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.labels.template.get(\"themeTags\", []), [\"pie\", \"series\"])\r\n        }, [this.labels.template]));\r\n    }\r\n    _makeTicks() {\r\n        return new _core_util_List__WEBPACK_IMPORTED_MODULE_1__.ListTemplate(_core_util_Template__WEBPACK_IMPORTED_MODULE_2__.Template.new({}), () => _core_render_Tick__WEBPACK_IMPORTED_MODULE_6__.Tick._new(this._root, {\r\n            themeTags: _core_util_Utils__WEBPACK_IMPORTED_MODULE_4__.mergeTags(this.ticks.template.get(\"themeTags\", []), [\"pie\", \"series\"])\r\n        }, [this.ticks.template]));\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        const slice = this.makeSlice(dataItem);\r\n        slice.on(\"scale\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        slice.on(\"shiftRadius\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        slice.events.on(\"positionchanged\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        const label = this.makeLabel(dataItem);\r\n        label.events.on(\"positionchanged\", () => {\r\n            this._updateTick(dataItem);\r\n        });\r\n        this.makeTick(dataItem);\r\n        slice.events.on(\"positionchanged\", () => {\r\n            label.markDirty();\r\n        });\r\n    }\r\n    _getNextUp() {\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            return chart._maxRadius;\r\n        }\r\n        return this.labelsContainer.maxHeight() / 2;\r\n    }\r\n    _getNextDown() {\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            return -chart._maxRadius;\r\n        }\r\n        return -this.labelsContainer.maxHeight() / 2;\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            if (this.isDirty(\"alignLabels\")) {\r\n                let labelsTemplate = this.labels.template;\r\n                if (this.get(\"alignLabels\")) {\r\n                    labelsTemplate.set(\"textType\", \"aligned\");\r\n                }\r\n                else {\r\n                    let textType = labelsTemplate.get(\"textType\");\r\n                    if (textType == null || textType == \"aligned\") {\r\n                        labelsTemplate.set(\"textType\", \"adjusted\");\r\n                    }\r\n                }\r\n            }\r\n            if (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || this.isDirty(\"alignLabels\")) {\r\n                this.markDirtyBounds();\r\n                const startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\r\n                const endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\r\n                const arc = endAngle - startAngle;\r\n                let currentAngle = startAngle;\r\n                const radius = chart.radius(this);\r\n                this.setPrivateRaw(\"radius\", radius);\r\n                let innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\r\n                if (innerRadius < 0) {\r\n                    innerRadius = radius + innerRadius;\r\n                }\r\n                //if (radius > 0) {\r\n                _core_util_Array__WEBPACK_IMPORTED_MODULE_7__.each(this._dataItems, (dataItem) => {\r\n                    this.updateLegendValue(dataItem);\r\n                    let currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\r\n                    const slice = dataItem.get(\"slice\");\r\n                    if (slice) {\r\n                        slice.set(\"radius\", radius);\r\n                        slice.set(\"innerRadius\", innerRadius);\r\n                        slice.set(\"startAngle\", currentAngle);\r\n                        slice.set(\"arc\", currentArc);\r\n                        const color = dataItem.get(\"fill\");\r\n                        slice._setDefault(\"fill\", color);\r\n                        slice._setDefault(\"stroke\", color);\r\n                    }\r\n                    let middleAngle = _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.normalizeAngle(currentAngle + currentArc / 2);\r\n                    const label = dataItem.get(\"label\");\r\n                    if (label) {\r\n                        label.setPrivate(\"radius\", radius);\r\n                        label.setPrivate(\"innerRadius\", innerRadius);\r\n                        label.set(\"labelAngle\", middleAngle);\r\n                        if (label.get(\"textType\") == \"aligned\") {\r\n                            let labelRadius = radius + label.get(\"radius\", 0);\r\n                            let y = radius * _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.sin(middleAngle);\r\n                            if (middleAngle > 90 && middleAngle <= 270) {\r\n                                if (!label.isHidden() && !label.isHiding()) {\r\n                                    this._lLabels.push({ label: label, y: y });\r\n                                }\r\n                                labelRadius *= -1;\r\n                                labelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\r\n                                label.set(\"centerX\", _core_util_Percent__WEBPACK_IMPORTED_MODULE_9__.p100);\r\n                                label.setPrivateRaw(\"left\", true);\r\n                            }\r\n                            else {\r\n                                if (!label.isHidden() && !label.isHiding()) {\r\n                                    this._rLabels.push({ label: label, y: y });\r\n                                }\r\n                                labelRadius += this.labelsContainer.get(\"paddingRight\", 0);\r\n                                label.set(\"centerX\", 0);\r\n                                label.setPrivateRaw(\"left\", false);\r\n                            }\r\n                            label.set(\"x\", labelRadius);\r\n                            label.set(\"y\", radius * _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.sin(middleAngle));\r\n                        }\r\n                    }\r\n                    currentAngle += currentArc;\r\n                    this._updateTick(dataItem);\r\n                });\r\n                //}\r\n            }\r\n        }\r\n    }\r\n    _updateTick(dataItem) {\r\n        const tick = dataItem.get(\"tick\");\r\n        const label = dataItem.get(\"label\");\r\n        const slice = dataItem.get(\"slice\");\r\n        const location = tick.get(\"location\", 1);\r\n        if (tick && label && slice) {\r\n            const radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\r\n            const labelAngle = label.get(\"labelAngle\", 0);\r\n            const cos = _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.cos(labelAngle);\r\n            const sin = _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.sin(labelAngle);\r\n            const labelsContainer = this.labelsContainer;\r\n            const pl = labelsContainer.get(\"paddingLeft\", 0);\r\n            const pr = labelsContainer.get(\"paddingRight\", 0);\r\n            let x = 0;\r\n            let y = 0;\r\n            x = label.x();\r\n            y = label.y();\r\n            if (label.get(\"textType\") == \"circular\") {\r\n                const labelRadius = label.radius() - label.get(\"paddingBottom\", 0);\r\n                const labelAngle = label.get(\"labelAngle\", 0);\r\n                x = labelRadius * _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.cos(labelAngle);\r\n                y = labelRadius * _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.sin(labelAngle);\r\n            }\r\n            let dx = -pr;\r\n            if (label.getPrivate(\"left\")) {\r\n                dx = pl;\r\n            }\r\n            tick.set(\"points\", [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }]);\r\n        }\r\n    }\r\n    _positionBullet(bullet) {\r\n        const sprite = bullet.get(\"sprite\");\r\n        if (sprite) {\r\n            const dataItem = sprite.dataItem;\r\n            const slice = dataItem.get(\"slice\");\r\n            if (slice) {\r\n                const innerRadius = slice.get(\"innerRadius\", 0);\r\n                const radius = slice.get(\"radius\", 0);\r\n                const startAngle = slice.get(\"startAngle\", 0);\r\n                const arc = slice.get(\"arc\", 0);\r\n                const locationX = bullet.get(\"locationX\", 0.5);\r\n                const locationY = bullet.get(\"locationY\", 0.5);\r\n                const angle = startAngle + arc * locationX;\r\n                const r = innerRadius + (radius - innerRadius) * locationY;\r\n                sprite.setAll({ x: _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.cos(angle) * r, y: _core_util_Math__WEBPACK_IMPORTED_MODULE_8__.sin(angle) * r });\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(PieSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"PieSeries\"\r\n});\r\nObject.defineProperty(PieSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _percent_PercentSeries__WEBPACK_IMPORTED_MODULE_0__.PercentSeries.classNames.concat([PieSeries.className])\r\n});\r\n//# sourceMappingURL=PieSeries.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieSeries.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/percent.js":
/*!*****************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/percent.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTheme: () => (/* reexport safe */ _internal_charts_percent_PercentDefaultTheme__WEBPACK_IMPORTED_MODULE_9__.PercentDefaultTheme),\n/* harmony export */   FunnelSeries: () => (/* reexport safe */ _internal_charts_funnel_FunnelSeries__WEBPACK_IMPORTED_MODULE_4__.FunnelSeries),\n/* harmony export */   FunnelSlice: () => (/* reexport safe */ _internal_charts_funnel_FunnelSlice__WEBPACK_IMPORTED_MODULE_5__.FunnelSlice),\n/* harmony export */   PercentChart: () => (/* reexport safe */ _internal_charts_percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__.PercentChart),\n/* harmony export */   PercentSeries: () => (/* reexport safe */ _internal_charts_percent_PercentSeries__WEBPACK_IMPORTED_MODULE_1__.PercentSeries),\n/* harmony export */   PictorialStackedSeries: () => (/* reexport safe */ _internal_charts_funnel_PictorialStackedSeries__WEBPACK_IMPORTED_MODULE_6__.PictorialStackedSeries),\n/* harmony export */   PieChart: () => (/* reexport safe */ _internal_charts_pie_PieChart__WEBPACK_IMPORTED_MODULE_2__.PieChart),\n/* harmony export */   PieSeries: () => (/* reexport safe */ _internal_charts_pie_PieSeries__WEBPACK_IMPORTED_MODULE_3__.PieSeries),\n/* harmony export */   PyramidSeries: () => (/* reexport safe */ _internal_charts_funnel_PyramidSeries__WEBPACK_IMPORTED_MODULE_7__.PyramidSeries),\n/* harmony export */   SlicedChart: () => (/* reexport safe */ _internal_charts_funnel_SlicedChart__WEBPACK_IMPORTED_MODULE_8__.SlicedChart)\n/* harmony export */ });\n/* harmony import */ var _internal_charts_percent_PercentChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.internal/charts/percent/PercentChart */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentChart.js\");\n/* harmony import */ var _internal_charts_percent_PercentSeries__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.internal/charts/percent/PercentSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentSeries.js\");\n/* harmony import */ var _internal_charts_pie_PieChart__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.internal/charts/pie/PieChart */ \"./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieChart.js\");\n/* harmony import */ var _internal_charts_pie_PieSeries__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.internal/charts/pie/PieSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/pie/PieSeries.js\");\n/* harmony import */ var _internal_charts_funnel_FunnelSeries__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./.internal/charts/funnel/FunnelSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSeries.js\");\n/* harmony import */ var _internal_charts_funnel_FunnelSlice__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.internal/charts/funnel/FunnelSlice */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/FunnelSlice.js\");\n/* harmony import */ var _internal_charts_funnel_PictorialStackedSeries__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./.internal/charts/funnel/PictorialStackedSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PictorialStackedSeries.js\");\n/* harmony import */ var _internal_charts_funnel_PyramidSeries__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./.internal/charts/funnel/PyramidSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/PyramidSeries.js\");\n/* harmony import */ var _internal_charts_funnel_SlicedChart__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./.internal/charts/funnel/SlicedChart */ \"./node_modules/@amcharts/amcharts5/.internal/charts/funnel/SlicedChart.js\");\n/* harmony import */ var _internal_charts_percent_PercentDefaultTheme__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./.internal/charts/percent/PercentDefaultTheme */ \"./node_modules/@amcharts/amcharts5/.internal/charts/percent/PercentDefaultTheme.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=percent.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/percent.js?");

/***/ })

}]);