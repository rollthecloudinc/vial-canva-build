"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcbdc_carbon_reporting_dashboard"] = self["webpackChunkcbdc_carbon_reporting_dashboard"] || []).push([["json_plugins_exporting"],{

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/Picture.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/Picture.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Picture: () => (/* binding */ Picture)\n/* harmony export */ });\n/* harmony import */ var _Sprite__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sprite */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Sprite.js\");\n/* harmony import */ var _util_Type__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/Type */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js\");\n\r\n\r\n/**\r\n * Displays an image.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/common-elements/images/} for more info\r\n * @important\r\n */\r\nclass Picture extends _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_display\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this._root._renderer.makePicture(undefined)\r\n        });\r\n    }\r\n    _changed() {\r\n        super._changed();\r\n        if (this.isDirty(\"width\")) {\r\n            const width = this.get(\"width\");\r\n            this._display.width = _util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(width) ? width : undefined;\r\n        }\r\n        if (this.isDirty(\"height\")) {\r\n            const height = this.get(\"height\");\r\n            this._display.height = _util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(height) ? height : undefined;\r\n        }\r\n        if (this.isDirty(\"shadowColor\")) {\r\n            this._display.clear();\r\n            const shadowColor = this.get(\"shadowColor\");\r\n            this._display.shadowColor = shadowColor == null ? undefined : shadowColor;\r\n        }\r\n        if (this.isDirty(\"shadowBlur\")) {\r\n            this._display.clear();\r\n            this._display.shadowBlur = this.get(\"shadowBlur\");\r\n        }\r\n        if (this.isDirty(\"shadowOffsetX\")) {\r\n            this._display.clear();\r\n            this._display.shadowOffsetX = this.get(\"shadowOffsetX\");\r\n        }\r\n        if (this.isDirty(\"shadowOffsetY\")) {\r\n            this._display.clear();\r\n            this._display.shadowOffsetY = this.get(\"shadowOffsetY\");\r\n        }\r\n        if (this.isDirty(\"shadowOpacity\")) {\r\n            this._display.clear();\r\n            this._display.shadowOpacity = this.get(\"shadowOpacity\");\r\n        }\r\n        if (this.isDirty(\"src\") || this.isDirty(\"cors\")) {\r\n            this._display.clear();\r\n            this._load();\r\n        }\r\n    }\r\n    _load() {\r\n        const src = this.get(\"src\");\r\n        if (src) {\r\n            let eventType = \"loaded\";\r\n            const image = new Image();\r\n            image.crossOrigin = this.get(\"cors\", \"anonymous\");\r\n            image.src = src;\r\n            image.decode().then(() => {\r\n                this._display.image = image;\r\n                this._updateSize();\r\n            }).catch((_error) => {\r\n                eventType = \"loaderror\";\r\n            });\r\n            if (this.events.isEnabled(eventType)) {\r\n                this.events.dispatch(eventType, { type: eventType, target: this });\r\n            }\r\n        }\r\n    }\r\n    _updateSize() {\r\n        super._updateSize();\r\n        const image = this._display.image;\r\n        if (image) {\r\n            let w = this.getPrivate(\"width\", this.get(\"width\"));\r\n            let h = this.getPrivate(\"height\", this.get(\"height\"));\r\n            const r = image.width && image.height ? image.width / image.height : 0;\r\n            if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(w) && _util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(h)) {\r\n                this._display.width = w;\r\n                this._display.height = h;\r\n            }\r\n            else if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(w) && r) {\r\n                h = w / r;\r\n            }\r\n            else if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(h) && r) {\r\n                w = h * r;\r\n            }\r\n            else {\r\n                w = image.width;\r\n                h = image.height;\r\n            }\r\n            if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(w)) {\r\n                this._display.width = w;\r\n            }\r\n            if (_util_Type__WEBPACK_IMPORTED_MODULE_1__.isNumber(h)) {\r\n                this._display.height = h;\r\n            }\r\n            this.markDirtyBounds();\r\n            this.markDirty();\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(Picture, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"Picture\"\r\n});\r\nObject.defineProperty(Picture, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _Sprite__WEBPACK_IMPORTED_MODULE_0__.Sprite.classNames.concat([Picture.className])\r\n});\r\n//# sourceMappingURL=Picture.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/core/render/Picture.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Annotator.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Annotator.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Annotator: () => (/* binding */ Annotator)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/util/Entity */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js\");\n/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/render/Container */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js\");\n/* harmony import */ var _core_render_Picture__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/render/Picture */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Picture.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n/* harmony import */ var _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Percent */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Percent.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * A plugin that can be used to annotate charts.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/exporting/annotator/} for more info\r\n */\r\nclass Annotator extends _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__.Entity {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_container\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_picture\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_markerArea\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_skipRender\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n    }\r\n    //public extraImages: Array<Root | IAnnotatorImageSource> = [];\r\n    //public dataSources: any[] = [];\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this._setRawDefault(\"layer\", 1000);\r\n        this._root.addDisposer(this);\r\n    }\r\n    _beforeChanged() {\r\n        super._beforeChanged();\r\n        if (this.isDirty(\"markerState\")) {\r\n            this._renderState();\r\n        }\r\n    }\r\n    /**\r\n     * Triggers annotation mode on the chart. This will display UI toolbars and\r\n     * disable all interactions on the chart itself.\r\n     */\r\n    open() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            // Delay this so that it's not knocked off by closing of the ExportingMenu\r\n            this.setTimeout(() => {\r\n                this._root._renderer.interactionsEnabled = false;\r\n            }, 100);\r\n            const markerArea = yield this.getMarkerArea();\r\n            markerArea.show();\r\n            this._picture.hide(0);\r\n            if (this.get(\"markerState\")) {\r\n                markerArea.restoreState(this.get(\"markerState\"));\r\n            }\r\n        });\r\n    }\r\n    _renderState() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            const markerArea = yield this.getMarkerArea();\r\n            if (this.get(\"markerState\")) {\r\n                this._skipRender = true;\r\n                markerArea.renderState(this.get(\"markerState\"));\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Exists from annotation mode. All annotations remain visible on the chart.\r\n     */\r\n    close() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            //this._root._renderer.interactionsEnabled = true;\r\n            const markerArea = yield this.getMarkerArea();\r\n            markerArea.close();\r\n        });\r\n    }\r\n    /**\r\n     * Exits from annotation mode. Any changes made during last session of the\r\n     * annotation editing are cancelled.\r\n     */\r\n    cancel() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            this._root._renderer.interactionsEnabled = true;\r\n            const markerArea = yield this.getMarkerArea();\r\n            this._picture.show(0);\r\n            markerArea.cancel();\r\n        });\r\n    }\r\n    /**\r\n     * All annotations are removed.\r\n     */\r\n    clear() {\r\n        this.set(\"markerState\", undefined);\r\n        if (this._picture) {\r\n            this._picture.set(\"src\", \"\");\r\n        }\r\n    }\r\n    toggle() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            const markerArea = yield this.getMarkerArea();\r\n            if (markerArea.isOpen) {\r\n                this.close();\r\n            }\r\n            else {\r\n                this.open();\r\n            }\r\n        });\r\n    }\r\n    dispose() {\r\n        super.dispose();\r\n        if (this._markerArea && this._markerArea.isOpen) {\r\n            this._markerArea.close();\r\n        }\r\n    }\r\n    _maybeInit() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            // Create layer canvas\r\n            if (!this._container) {\r\n                this._container = this._root.container.children.push(_core_render_Container__WEBPACK_IMPORTED_MODULE_2__.Container.new(this._root, {\r\n                    width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,\r\n                    height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,\r\n                    layer: this.get(\"layer\"),\r\n                    interactiveChildren: false\r\n                }));\r\n                this._picture = this._container.children.push(_core_render_Picture__WEBPACK_IMPORTED_MODULE_4__.Picture.new(this._root, {\r\n                    width: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100,\r\n                    height: _core_util_Percent__WEBPACK_IMPORTED_MODULE_3__.p100\r\n                }));\r\n            }\r\n            // Create MarkerArea\r\n            if (!this._markerArea) {\r\n                const markerjs2 = yield this._getMarkerJS();\r\n                const canvas = this._container._display.getCanvas();\r\n                const markerArea = new markerjs2.MarkerArea(canvas);\r\n                //markerArea.renderTarget = canvas;\r\n                markerArea.uiStyleSettings.logoPosition = \"right\";\r\n                markerArea.uiStyleSettings.zIndex = 20;\r\n                markerArea.targetRoot = canvas.parentElement;\r\n                this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_5__.addEventListener(markerArea, \"close\", () => {\r\n                    this._root._renderer.interactionsEnabled = true;\r\n                    this._picture.show(0);\r\n                }));\r\n                this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_5__.addEventListener(markerArea, \"render\", (event) => {\r\n                    const picture = this._picture;\r\n                    picture.set(\"src\", event.dataUrl);\r\n                    if (!this._skipRender) {\r\n                        this.set(\"markerState\", event.state);\r\n                    }\r\n                    this._skipRender = false;\r\n                }));\r\n                this._markerArea = markerArea;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _getMarkerJS() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            return yield __webpack_require__.e(/*! import() | markerjs2 */ \"markerjs2\").then(__webpack_require__.bind(__webpack_require__, /*! markerjs2 */ \"./node_modules/markerjs2/markerjs2.esm.js\"));\r\n        });\r\n    }\r\n    /**\r\n     * An instance of MarkerJS's [[MarkerArea]].\r\n     *\r\n     * @see {@link https://markerjs.com/docs/getting-started} for more info\r\n     * @return MarkerArea\r\n     */\r\n    getMarkerArea() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_1__.__awaiter)(this, void 0, void 0, function* () {\r\n            yield this._maybeInit();\r\n            return this._markerArea;\r\n        });\r\n    }\r\n}\r\nObject.defineProperty(Annotator, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"Annotator\"\r\n});\r\nObject.defineProperty(Annotator, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__.Entity.classNames.concat([Annotator.className])\r\n});\r\n//# sourceMappingURL=Annotator.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Annotator.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Exporting.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Exporting.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Exporting: () => (/* binding */ Exporting)\n/* harmony export */ });\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _core_util_Entity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Entity */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js\");\n/* harmony import */ var _core_util_Color__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../core/util/Color */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Color.js\");\n/* harmony import */ var _core_Root__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/Root */ \"./node_modules/@amcharts/amcharts5/.internal/core/Root.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n/* harmony import */ var _core_util_Object__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Object */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Object.js\");\n/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/util/Type */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * This is used to cache the pdfmake loading.\r\n *\r\n * @ignore\r\n */\r\nlet pdfmakePromise;\r\n/**\r\n * Loads pdfmake dynamic module\r\n *\r\n * This is an asynchronous function. Check the description of `getImage()`\r\n * for description and example usage.\r\n *\r\n * @ignore\r\n */\r\nfunction _pdfmake() {\r\n    return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n        let a = yield Promise.all([\r\n            __webpack_require__.e(/*! import() | pdfmake */ \"pdfmake\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdfmake/build/pdfmake.js */ \"./node_modules/pdfmake/build/pdfmake.js\", 23)),\r\n            __webpack_require__.e(/*! import() | pdfmake */ \"pdfmake\").then(__webpack_require__.bind(__webpack_require__, /*! ./pdfmake/vfs_fonts */ \"./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/pdfmake/vfs_fonts.js\"))\r\n        ]);\r\n        let pdfmake = a[0].default;\r\n        let vfs_fonts = a[1].default;\r\n        const global = window;\r\n        global.pdfMake = global.pdfMake || {};\r\n        global.pdfMake.vfs = vfs_fonts;\r\n        pdfmake.vfs = vfs_fonts;\r\n        return pdfmake;\r\n    });\r\n}\r\n/**\r\n * A plugin that can be used to export chart snapshots and data.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/exporting/} for more info\r\n */\r\nclass Exporting extends _core_util_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity {\r\n    //public extraImages: Array<Root | IExportingImageSource> = [];\r\n    //public dataSources: any[] = [];\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this._setRawDefault(\"filePrefix\", \"chart\");\r\n        this._setRawDefault(\"charset\", \"utf-8\");\r\n        this._setRawDefault(\"numericFields\", []);\r\n        this._setRawDefault(\"dateFields\", []);\r\n        this._setRawDefault(\"durationFields\", []);\r\n        this._setRawDefault(\"extraImages\", []);\r\n        this._setRawDefault(\"pngOptions\", { quality: 1, maintainPixelRatio: false });\r\n        this._setRawDefault(\"jpgOptions\", { quality: 0.8, maintainPixelRatio: false });\r\n        this._setRawDefault(\"printOptions\", { quality: 1, maintainPixelRatio: false, delay: 500, printMethod: \"iframe\", imageFormat: \"png\" });\r\n        this._setRawDefault(\"jsonOptions\", { indent: 2, renameFields: true });\r\n        this._setRawDefault(\"csvOptions\", { separator: \",\", addColumnNames: true, emptyAs: \"\", addBOM: true });\r\n        this._setRawDefault(\"htmlOptions\", { emptyAs: \"-\", addColumnNames: true });\r\n        this._setRawDefault(\"xlsxOptions\", { emptyAs: \"\", addColumnNames: true });\r\n        this._setRawDefault(\"pdfOptions\", { fontSize: 14, imageFormat: \"png\", align: \"left\", addURL: true });\r\n        this._setRawDefault(\"pdfdataOptions\", { emptyAs: \"\", addColumnNames: true });\r\n        this._root.addDisposer(this);\r\n    }\r\n    _beforeChanged() {\r\n        super._beforeChanged();\r\n        if (this.isDirty(\"menu\")) {\r\n            const menu = this.get(\"menu\");\r\n            if (menu) {\r\n                menu.set(\"exporting\", this);\r\n                this._disposers.push(menu);\r\n            }\r\n        }\r\n    }\r\n    _getFormatOptions(format, options) {\r\n        const newOptions = _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.copy(this.get(format + \"Options\", {}));\r\n        if (options) {\r\n            _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.each(options, (key, value) => {\r\n                newOptions[key] = value;\r\n            });\r\n        }\r\n        return newOptions;\r\n    }\r\n    /**\r\n     * Triggers a download of the chart/data in specific format.\r\n     *\r\n     * @param  format         Format\r\n     * @param  customOptions  Format options\r\n     */\r\n    download(format, customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const ext = format == \"pdfdata\" ? \"pdf\" : format;\r\n            const fileName = this.get(\"filePrefix\", \"chart\") + \".\" + ext;\r\n            const options = this._getFormatOptions(format, customOptions);\r\n            this.events.dispatch(\"downloadstarted\", {\r\n                type: \"downloadstarted\",\r\n                format: format,\r\n                options: options,\r\n                fileName: fileName,\r\n                target: this\r\n            });\r\n            const uri = yield this.export(format, options);\r\n            this.streamFile(uri, fileName, (options && options.addBOM));\r\n        });\r\n    }\r\n    /**\r\n     * Triggers print of the chart.\r\n     *\r\n     * @param  customOptions  Print options\r\n     */\r\n    print(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"print\", customOptions);\r\n            this.events.dispatch(\"printstarted\", {\r\n                type: \"printstarted\",\r\n                format: \"print\",\r\n                options: options,\r\n                target: this\r\n            });\r\n            const uri = yield this.export(options.imageFormat || \"png\", options);\r\n            this.initiatePrint(uri, options, this.get(\"title\"));\r\n        });\r\n    }\r\n    /**\r\n     * Returns data uri of the chart/data in specific format.\r\n     *\r\n     * @param          format  Format\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    export(format, customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(format, customOptions);\r\n            this.events.dispatch(\"exportstarted\", {\r\n                type: \"exportstarted\",\r\n                format: format,\r\n                options: options,\r\n                target: this\r\n            });\r\n            let promise = \"\";\r\n            switch (format) {\r\n                case \"png\":\r\n                case \"jpg\":\r\n                    this._root._runTickerNow();\r\n                    promise = this.exportImage(format, options);\r\n                    break;\r\n                case \"json\":\r\n                    promise = this.exportJSON(options);\r\n                    break;\r\n                case \"csv\":\r\n                    promise = this.exportCSV(options);\r\n                    break;\r\n                case \"html\":\r\n                    promise = this.exportHTML(options);\r\n                    break;\r\n                case \"xlsx\":\r\n                    promise = this.exportXLSX(options);\r\n                    break;\r\n                case \"pdf\":\r\n                    this._root._runTickerNow();\r\n                    promise = this.exportPDF(options);\r\n                    break;\r\n                case \"pdfdata\":\r\n                    promise = this.exportPDFData(options);\r\n                    break;\r\n            }\r\n            this.events.dispatch(\"exportfinished\", {\r\n                type: \"exportfinished\",\r\n                format: format,\r\n                options: options,\r\n                target: this\r\n            });\r\n            return promise;\r\n        });\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * Images\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Returns chart image as a data:uri.\r\n     *\r\n     * @param   format         Image format\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportImage(format, customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(format, customOptions);\r\n            const canvas = yield this.getCanvas(options);\r\n            const data = canvas.toDataURL(this.getContentType(format), options.quality || 1);\r\n            this.disposeCanvas(canvas);\r\n            return data;\r\n        });\r\n    }\r\n    /**\r\n     * Returns canvas data.\r\n     *\r\n     * @param   customOptions  Image options\r\n     * @return                 Promise\r\n     */\r\n    exportCanvas(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"canvas\", customOptions);\r\n            const canvas = yield this.getCanvas(options);\r\n            const data = canvas.toDataURL(this.getContentType(\"canvas\"), options.quality || 1);\r\n            this.disposeCanvas(canvas);\r\n            return data;\r\n        });\r\n    }\r\n    /**\r\n     * Returns a `<canvas>` element with snapshot of the chart.\r\n     *\r\n     * @param   options  Image options\r\n     * @return           Promise\r\n     */\r\n    getCanvas(options) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const mainCanvas = this._root._renderer.getCanvas(this._root._rootContainer._display, options);\r\n            const extraImages = this.get(\"extraImages\", []);\r\n            // Add other canvases\r\n            let middleLeft = 0;\r\n            let middleTop = 0;\r\n            let middleWidth = mainCanvas.width;\r\n            let middleHeight = mainCanvas.height;\r\n            let extraRight = 0;\r\n            let extraBottom = 0;\r\n            const extras = [];\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(extraImages, (extraRoot) => {\r\n                // Get that extra\r\n                let extra;\r\n                if (extraRoot instanceof _core_Root__WEBPACK_IMPORTED_MODULE_4__.Root) {\r\n                    extra = {\r\n                        source: extraRoot,\r\n                        position: \"bottom\"\r\n                    };\r\n                }\r\n                else {\r\n                    extra = extraRoot;\r\n                }\r\n                // Set defaults\r\n                extra.position = extra.position || \"bottom\";\r\n                extra.marginTop = extra.marginTop || 0;\r\n                extra.marginRight = extra.marginRight || 0;\r\n                extra.marginBottom = extra.marginBottom || 0;\r\n                extra.marginLeft = extra.marginLeft || 0;\r\n                const extraCanvas = extra.source._renderer.getCanvas(extra.source._rootContainer._display, options);\r\n                const extraWidth = extraCanvas.width + extra.marginLeft + extra.marginRight;\r\n                const extraHeight = extraCanvas.height + extra.marginTop + extra.marginBottom;\r\n                if (extra.position == \"top\") {\r\n                    middleWidth = extra.crop ? middleHeight : Math.max(middleWidth, extraWidth);\r\n                    middleTop += extraHeight;\r\n                }\r\n                else if (extra.position == \"right\") {\r\n                    middleHeight = extra.crop ? middleHeight : Math.max(middleHeight, extraHeight);\r\n                    extraRight += extraWidth;\r\n                }\r\n                else if (extra.position == \"left\") {\r\n                    middleHeight = extra.crop ? middleHeight : Math.max(middleHeight, extraHeight);\r\n                    middleLeft += extraWidth;\r\n                }\r\n                else if (extra.position === \"bottom\") {\r\n                    middleWidth = extra.crop ? middleHeight : Math.max(middleWidth, extraWidth);\r\n                    extraBottom += extraHeight;\r\n                }\r\n                extras.push({\r\n                    canvas: extraCanvas,\r\n                    position: extra.position,\r\n                    left: extra.marginLeft,\r\n                    top: extra.marginTop,\r\n                    width: extraWidth,\r\n                    height: extraHeight\r\n                });\r\n            });\r\n            const newCanvas = this.getDisposableCanvas();\r\n            newCanvas.width = middleLeft + middleWidth + extraRight;\r\n            newCanvas.height = middleTop + middleHeight + extraBottom;\r\n            const ctx = newCanvas.getContext(\"2d\");\r\n            // Get background\r\n            const background = this.get(\"backgroundColor\", this.findBackgroundColor(this._root.dom));\r\n            const backgroundOpacity = this.get(\"backgroundOpacity\", 1);\r\n            if (background) {\r\n                ctx.fillStyle = background.toCSS(backgroundOpacity);\r\n                ctx.fillRect(0, 0, newCanvas.width, newCanvas.height);\r\n            }\r\n            let left = middleLeft;\r\n            let top = middleTop;\r\n            let right = left + middleWidth;\r\n            let bottom = top + middleHeight;\r\n            // Radiates outwards from center\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(extras, (extra) => {\r\n                if (extra.position == \"top\") {\r\n                    top -= extra.height;\r\n                    ctx.drawImage(extra.canvas, middleLeft + extra.left, top + extra.top);\r\n                }\r\n                else if (extra.position == \"right\") {\r\n                    ctx.drawImage(extra.canvas, right + extra.left, middleTop + extra.top);\r\n                    right += extra.width;\r\n                }\r\n                else if (extra.position == \"left\") {\r\n                    left -= extra.width;\r\n                    ctx.drawImage(extra.canvas, left + extra.left, middleTop + extra.top);\r\n                }\r\n                else if (extra.position === \"bottom\") {\r\n                    ctx.drawImage(extra.canvas, middleLeft + extra.left, bottom + extra.top);\r\n                    bottom += extra.height;\r\n                }\r\n                //this.disposeCanvas(extra.canvas);\r\n            });\r\n            ctx.drawImage(mainCanvas, middleLeft, middleTop);\r\n            return newCanvas;\r\n        });\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * JSON\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Returns a data:uri representation of a JSON file with chart data.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportJSON(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return \"data:\" + this.getContentType(\"json\") + \";\" + this.get(\"charset\", \"utf-8\") + \",\" + encodeURIComponent(yield this.getJSON(customOptions));\r\n        });\r\n    }\r\n    /**\r\n     * Returns data in JSON format.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    getJSON(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"json\", customOptions);\r\n            return JSON.stringify(this.getData(\"json\", customOptions, options.renameFields), (_key, value) => {\r\n                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isObject(value)) {\r\n                    _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.each(value, (field, item) => {\r\n                        value[field] = this.convertToSpecialFormat(field, item, options);\r\n                    });\r\n                }\r\n                return value;\r\n            }, options.indent);\r\n        });\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * CSV\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Returns a data:uri representation of a CSV file with chart data.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportCSV(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return \"data:\" + this.getContentType(\"csv\") + \";\" + this.get(\"charset\", \"utf-8\") + \",\" + encodeURIComponent(yield this.getCSV(customOptions));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a CSV with export data.\r\n     *\r\n     * @param   customOptions  CSV options\r\n     * @return                 Promise\r\n     */\r\n    getCSV(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"csv\", customOptions);\r\n            // Init output\r\n            let csv = \"\";\r\n            // Add rows\r\n            let br = \"\";\r\n            const data = this.getData(\"csv\", options);\r\n            // Data fields\r\n            const dataFields = this.getDataFields(data);\r\n            // Vertical or horizontal (default) layout\r\n            if (options.pivot) {\r\n                // Data fields order\r\n                const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n                _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, val) => {\r\n                    let dataRow = [];\r\n                    if (options.addColumnNames) {\r\n                        dataRow.push(val);\r\n                    }\r\n                    for (let len = data.length, i = 0; i < len; i++) {\r\n                        let dataValue = data[i][key];\r\n                        dataRow.push(this.convertToSpecialFormat(key, dataValue, options, true));\r\n                    }\r\n                    csv += br + this.getCSVRow(dataRow, options, undefined, true);\r\n                    br = \"\\n\";\r\n                }, (a, b) => {\r\n                    let ai = dataFieldsOrder.indexOf(a);\r\n                    let bi = dataFieldsOrder.indexOf(b);\r\n                    if (ai > bi) {\r\n                        return -1;\r\n                    }\r\n                    else if (ai < bi) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            else {\r\n                for (let len = data.length, i = 0; i < len; i++) {\r\n                    let row = this.getCSVRow(data[i], options, dataFields);\r\n                    if (options.reverse) {\r\n                        csv = row + br + csv;\r\n                    }\r\n                    else {\r\n                        csv += br + row;\r\n                    }\r\n                    br = \"\\n\";\r\n                }\r\n                // Add column names?\r\n                if (options.addColumnNames) {\r\n                    csv = this.getCSVRow(dataFields, options, undefined, true) + br + csv;\r\n                }\r\n            }\r\n            return csv;\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getCSVRow(row, options, dataFields, asIs = false) {\r\n        // Init\r\n        let separator = options.separator || \",\";\r\n        let items = [];\r\n        // Data fields\r\n        if (!dataFields) {\r\n            dataFields = {};\r\n            _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.each(row, (key, value) => {\r\n                dataFields[key] = value;\r\n            });\r\n        }\r\n        // Data fields order\r\n        const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n        // Process each row item\r\n        _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, _name) => {\r\n            // Get value\r\n            let value = this.convertEmptyValue(key, row[key], options);\r\n            // Check if we need to skip\r\n            // This is no longer required because we are iterating via dataFields anyway\r\n            /*if (this.dataFields != null && this.dataFields[key] == null) {\r\n                return;\r\n            }*/\r\n            // Convert dates\r\n            let item = asIs ? value : this.convertToSpecialFormat(key, value, options);\r\n            // Cast and escape doublequotes\r\n            item = \"\" + item;\r\n            item = item.replace(/\"/g, '\"\"');\r\n            // Enclose into double quotes\r\n            if (options.forceQuotes || (item.search(new RegExp(\"\\\"|\\n|\" + separator, \"g\")) >= 0)) {\r\n                item = \"\\\"\" + item + \"\\\"\";\r\n            }\r\n            // Add to item\r\n            items.push(item);\r\n        }, (a, b) => {\r\n            let ai = dataFieldsOrder.indexOf(a);\r\n            let bi = dataFieldsOrder.indexOf(b);\r\n            if (ai > bi) {\r\n                return 1;\r\n            }\r\n            else if (ai < bi) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return items.join(separator);\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * HTML\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Returns a data:uri representation of an HTML file with chart data.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportHTML(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return \"data:\" + this.getContentType(\"html\") + \";\" + this.get(\"charset\", \"utf-8\") + \",\" + encodeURIComponent(yield this.getHTML(customOptions));\r\n        });\r\n    }\r\n    /**\r\n     * Returns an HTML with a table with export data.\r\n     *\r\n     * @param   customOptions  HTML options\r\n     * @return                 Promise\r\n     */\r\n    getHTML(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"html\", customOptions);\r\n            // Init output\r\n            let html = \"<table>\";\r\n            if (options.tableClass) {\r\n                html = \"<table class=\\\"\" + options.tableClass + \"\\\">\";\r\n            }\r\n            // Get data\r\n            const data = this.getData(\"html\", options);\r\n            const dataFields = this.getDataFields(data);\r\n            // Vertical or horizontal (default) layout\r\n            if (options.pivot) {\r\n                // Data fields order\r\n                const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n                html += \"\\n<tbody>\";\r\n                _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, val) => {\r\n                    let dataRow = [];\r\n                    if (options.addColumnNames) {\r\n                        dataRow.push(val);\r\n                    }\r\n                    for (let len = data.length, i = 0; i < len; i++) {\r\n                        let dataValue = data[i][key];\r\n                        dataRow.push(this.convertToSpecialFormat(key, dataValue, options, true));\r\n                    }\r\n                    html += \"\\n\" + this.getHTMLRow(dataRow, options, undefined, true);\r\n                }, (a, b) => {\r\n                    let ai = dataFieldsOrder.indexOf(a);\r\n                    let bi = dataFieldsOrder.indexOf(b);\r\n                    if (ai > bi) {\r\n                        return -1;\r\n                    }\r\n                    else if (ai < bi) {\r\n                        return 1;\r\n                    }\r\n                    return 0;\r\n                });\r\n                html += \"\\n</tbody>\";\r\n            }\r\n            else {\r\n                // Add column names?\r\n                if (options.addColumnNames) {\r\n                    html += \"\\n<thead>\\n\" + this.getHTMLRow(dataFields, options, undefined, true, true) + \"\\n</thead>\";\r\n                }\r\n                html += \"\\n<tbody>\";\r\n                for (let len = data.length, i = 0; i < len; i++) {\r\n                    html += \"\\n\" + this.getHTMLRow(data[i], options, dataFields);\r\n                }\r\n                html += \"\\n</tbody>\";\r\n            }\r\n            html += \"\\n</table>\";\r\n            return html;\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getHTMLRow(row, options, dataFields, asIs = false, headerRow = false) {\r\n        // Init output\r\n        let html = \"\\t<tr>\";\r\n        if (options.rowClass) {\r\n            html = \"\\t<tr class=\\\"\" + options.rowClass + \"\\\">\";\r\n        }\r\n        // Data fields\r\n        if (!dataFields) {\r\n            dataFields = row;\r\n        }\r\n        // Data fields order\r\n        const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n        // th or dh?\r\n        const tag = headerRow ? \"th\" : \"td\";\r\n        // Process each row item\r\n        let first = true;\r\n        _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, _name) => {\r\n            // Get value\r\n            let value = this.convertEmptyValue(key, row[key], options);\r\n            // Convert dates\r\n            let item = asIs ? value : this.convertToSpecialFormat(key, value, options);\r\n            // Escape HTML entities\r\n            item = \"\" + item;\r\n            item = item.replace(/[\\u00A0-\\u9999<>\\&]/gim, function (i) {\r\n                return \"&#\" + i.charCodeAt(0) + \";\";\r\n            });\r\n            // Which tag to use\r\n            let useTag = tag;\r\n            if (options.pivot && first) {\r\n                useTag = \"th\";\r\n            }\r\n            // Add cell\r\n            if (options.cellClass) {\r\n                html += \"\\n\\t\\t<\" + useTag + \" class=\\\"\" + options.cellClass + \"\\\">\" + item + \"</\" + useTag + \">\";\r\n            }\r\n            else {\r\n                html += \"\\n\\t\\t<\" + useTag + \">\" + item + \"</\" + useTag + \">\";\r\n            }\r\n            first = false;\r\n        }, (a, b) => {\r\n            let ai = dataFieldsOrder.indexOf(a);\r\n            let bi = dataFieldsOrder.indexOf(b);\r\n            if (ai > bi) {\r\n                return 1;\r\n            }\r\n            else if (ai < bi) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        html += \"\\n\\t</tr>\";\r\n        return html;\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * XLSX\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Returns a data:uri representation of an XLSX file with chart data.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportXLSX(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return \"data:\" + this.getContentType(\"xlsx\") + \";\" + this.get(\"charset\", \"utf-8\") + \",\" + encodeURIComponent(yield this.getXLSX(customOptions));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a data:uri of XLSX data.\r\n     *\r\n     * @param  customOptions  Format options\r\n     * @return                Promise\r\n     */\r\n    getXLSX(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"xlsx\", customOptions);\r\n            // Load xlsx\r\n            let XLSX = yield this.getXLSXLib();\r\n            // Create workbook options\r\n            let wbOptions = {\r\n                bookType: \"xlsx\",\r\n                bookSST: false,\r\n                type: \"base64\",\r\n                //dateNF: 'yyyy-mm-dd'\r\n            };\r\n            // Get sheet name\r\n            let sheetName = this._normalizeExcelSheetName(this.get(\"title\", this._t(\"Data\")));\r\n            // Create a workbook\r\n            let wb = {\r\n                SheetNames: [sheetName],\r\n                Sheets: {}\r\n            };\r\n            // Init worksheet data\r\n            let wsData = [];\r\n            // Get data\r\n            const data = this.getData(\"html\", options);\r\n            const dataFields = this.getDataFields(data);\r\n            // Vertical or horizontal (default) layout\r\n            if (options.pivot) {\r\n                // Data fields order\r\n                const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n                _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, val) => {\r\n                    let dataRow = [];\r\n                    if (options.addColumnNames) {\r\n                        dataRow.push(val);\r\n                    }\r\n                    for (let len = data.length, i = 0; i < len; i++) {\r\n                        let dataValue = data[i][key];\r\n                        dataRow.push(this.convertToSpecialFormat(key, dataValue, options, true));\r\n                    }\r\n                    wsData.push(this.getXLSXRow(dataRow, options, undefined, true));\r\n                }, (a, b) => {\r\n                    //console.log(a, b)\r\n                    let ai = dataFieldsOrder.indexOf(a);\r\n                    let bi = dataFieldsOrder.indexOf(b);\r\n                    if (ai > bi) {\r\n                        return 1;\r\n                    }\r\n                    else if (ai < bi) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            else {\r\n                // Add column names?\r\n                if (options.addColumnNames) {\r\n                    wsData.push(this.getXLSXRow(dataFields, options, undefined, true));\r\n                }\r\n                // Add lines\r\n                for (let len = data.length, i = 0; i < len; i++) {\r\n                    wsData.push(this.getXLSXRow(data[i], options, dataFields));\r\n                }\r\n            }\r\n            // Create sheet and add data\r\n            wb.Sheets[sheetName] = XLSX.utils.aoa_to_sheet(wsData);\r\n            this.events.dispatch(\"workbookready\", {\r\n                type: \"workbookready\",\r\n                format: \"xlsx\",\r\n                options: options,\r\n                workbook: wb,\r\n                workbookOptions: wbOptions,\r\n                xlsx: XLSX,\r\n                target: this\r\n            });\r\n            return XLSX.write(wb, wbOptions);\r\n        });\r\n    }\r\n    _normalizeExcelSheetName(name) {\r\n        name = name.replace(/([:\\\\\\/?*\\[\\]]+)/g, \" \");\r\n        return name.length > 30 ? name.substr(0, 30) + \"...\" : name;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getXLSXRow(row, options, dataFields, asIs = false) {\r\n        // Init\r\n        let items = [];\r\n        // Data fields\r\n        if (!dataFields) {\r\n            dataFields = row;\r\n        }\r\n        // Data fields order\r\n        const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n        // Process each row item\r\n        _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, _name) => {\r\n            // Get value\r\n            let value = this.convertEmptyValue(key, row[key], options);\r\n            // Convert dates\r\n            let item = asIs ? value : this.convertToSpecialFormat(key, value, options, true);\r\n            items.push(item);\r\n        }, (a, b) => {\r\n            //console.log(a, b)\r\n            let ai = dataFieldsOrder.indexOf(a);\r\n            let bi = dataFieldsOrder.indexOf(b);\r\n            if (ai > bi) {\r\n                return 1;\r\n            }\r\n            else if (ai < bi) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return items;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _xlsx() {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return yield __webpack_require__.e(/*! import() | xlsx */ \"xlsx\").then(__webpack_require__.bind(__webpack_require__, /*! ../../bundled/xlsx */ \"./node_modules/@amcharts/amcharts5/.internal/bundled/xlsx/xlsx.mjs\"));\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getXLSXLib() {\r\n        return this._xlsx();\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * PDF\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Returns a data:uri representation of a PDF file with chart image.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportPDF(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return \"data:\" + this.getContentType(\"pdf\") + \";\" + this.get(\"charset\", \"utf-8\") + \",\" + encodeURIComponent(yield this.getPDF(customOptions, true));\r\n        });\r\n    }\r\n    /**\r\n     * Returns a data:uri representation of a PDF file with chart data.\r\n     *\r\n     * @param   customOptions  Format options\r\n     * @return                 Promise\r\n     */\r\n    exportPDFData(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            return \"data:\" + this.getContentType(\"pdf\") + \";\" + this.get(\"charset\", \"utf-8\") + \",\" + encodeURIComponent(yield this.getPDF(customOptions, false, true));\r\n        });\r\n    }\r\n    /**\r\n     * Returns Base64-encoded binary data for a PDF file.\r\n     * @param   customOptions  PDF options\r\n     * @param   includeImage   Include chart snapshot\r\n     * @param   includeData    Include data\r\n     * @return                 Promise\r\n     */\r\n    getPDF(customOptions, includeImage = true, includeData = false) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"pdf\", customOptions);\r\n            const dataOptions = this._getFormatOptions(\"pdfdata\", customOptions);\r\n            const orientation = options.pageOrientation || \"portrait\";\r\n            // Get image\r\n            let image;\r\n            if (includeImage) {\r\n                image = yield this.exportImage(options.imageFormat || \"png\", options);\r\n            }\r\n            // Load pdfmake\r\n            const pdfmake = yield this.getPdfmake();\r\n            // Defaults\r\n            const defaultMargins = [30, 30, 30, 30];\r\n            // Init content for PDF\r\n            let doc = {\r\n                pageSize: options.pageSize || \"A4\",\r\n                pageOrientation: orientation,\r\n                pageMargins: options.pageMargins || defaultMargins,\r\n                defaultStyle: {\r\n                    font: options.font ? options.font.name : undefined\r\n                },\r\n                //header: <any>[],\r\n                content: []\r\n            };\r\n            // Should we add title?\r\n            const title = this.get(\"title\");\r\n            let extraMargin = 0;\r\n            if (title) {\r\n                doc.content.push({\r\n                    text: title,\r\n                    fontSize: options.fontSize || 14,\r\n                    bold: true,\r\n                    margin: [0, 0, 0, 15]\r\n                });\r\n                // Add some leftover margin for title\r\n                extraMargin += 50;\r\n            }\r\n            // Add page URL?\r\n            if (options.addURL) {\r\n                doc.content.push({\r\n                    text: this._t(\"Saved from\") + \": \" + document.location.href,\r\n                    fontSize: options.fontSize,\r\n                    margin: [0, 0, 0, 15]\r\n                });\r\n                // Add some leftover margin for URL\r\n                extraMargin += 50;\r\n            }\r\n            // Add image\r\n            if (includeImage && image) {\r\n                doc.content.push({\r\n                    image: image,\r\n                    alignment: options.align || \"left\",\r\n                    fit: this.getPageSizeFit(doc.pageSize, doc.pageMargins, extraMargin, orientation)\r\n                });\r\n            }\r\n            // Add data\r\n            if ((includeData || options.includeData) && this.hasData()) {\r\n                doc.content.push({\r\n                    table: yield this.getPDFData(dataOptions),\r\n                    fontSize: options.fontSize || 14\r\n                });\r\n            }\r\n            let fonts = null;\r\n            let vfs = null;\r\n            function addFont(font) {\r\n                const paths = {};\r\n                paths.normal = font.normal.path;\r\n                vfs[font.normal.path] = font.normal.bytes;\r\n                if (font.bold) {\r\n                    paths.bold = font.bold.path;\r\n                    vfs[font.bold.path] = font.bold.bytes;\r\n                }\r\n                else {\r\n                    paths.bold = font.normal.path;\r\n                }\r\n                if (font.italics) {\r\n                    paths.italics = font.italics.path;\r\n                    vfs[font.italics.path] = font.italics.bytes;\r\n                }\r\n                else {\r\n                    paths.italics = font.normal.path;\r\n                }\r\n                if (font.bolditalics) {\r\n                    paths.bolditalics = font.bolditalics.path;\r\n                    vfs[font.bolditalics.path] = font.bolditalics.bytes;\r\n                }\r\n                else {\r\n                    paths.bolditalics = font.normal.path;\r\n                }\r\n                fonts[font.name] = paths;\r\n            }\r\n            if (options.font) {\r\n                fonts = {};\r\n                vfs = {};\r\n                addFont(options.font);\r\n                if (options.extraFonts) {\r\n                    _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(options.extraFonts, addFont);\r\n                }\r\n            }\r\n            this.events.dispatch(\"pdfdocready\", {\r\n                type: \"pdfdocready\",\r\n                format: \"pdf\",\r\n                options: options,\r\n                doc: doc,\r\n                target: this\r\n            });\r\n            // Create PDF\r\n            return new Promise((success, _error) => {\r\n                pdfmake.createPdf(doc, null, fonts, vfs).getBase64((uri) => {\r\n                    success(uri);\r\n                });\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getPDFData(customOptions) {\r\n        return (0,tslib__WEBPACK_IMPORTED_MODULE_0__.__awaiter)(this, void 0, void 0, function* () {\r\n            const options = this._getFormatOptions(\"pdfdata\", customOptions);\r\n            // Init output\r\n            let content = {\r\n                \"body\": []\r\n            };\r\n            // Get data\r\n            const data = this.getData(\"html\", options);\r\n            const dataFields = this.getDataFields(data);\r\n            // Vertical or horizontal (default) layout\r\n            if (options.pivot) {\r\n                // Data fields order\r\n                const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n                _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, val) => {\r\n                    let dataRow = [];\r\n                    if (options.addColumnNames) {\r\n                        dataRow.push(val);\r\n                    }\r\n                    for (let len = data.length, i = 0; i < len; i++) {\r\n                        let dataValue = data[i][key];\r\n                        dataRow.push(this.convertToSpecialFormat(key, dataValue, options, true));\r\n                    }\r\n                    content.body.push(this.getPDFDataRow(dataRow, options, undefined, true));\r\n                }, (a, b) => {\r\n                    //console.log(a, b)\r\n                    let ai = dataFieldsOrder.indexOf(a);\r\n                    let bi = dataFieldsOrder.indexOf(b);\r\n                    if (ai > bi) {\r\n                        return 1;\r\n                    }\r\n                    else if (ai < bi) {\r\n                        return -1;\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            else {\r\n                // Add column names?\r\n                if (options.addColumnNames) {\r\n                    content.body.push(this.getPDFDataRow(dataFields, options, undefined, true));\r\n                    content.headerRows = 1;\r\n                }\r\n                for (let len = data.length, i = 0; i < len; i++) {\r\n                    content.body.push(this.getPDFDataRow(data[i], options, dataFields));\r\n                }\r\n            }\r\n            return content;\r\n        });\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getPDFDataRow(row, options, dataFields, asIs = false) {\r\n        // Init\r\n        let items = [];\r\n        // Data fields\r\n        if (!dataFields) {\r\n            dataFields = row;\r\n        }\r\n        // Data fields order\r\n        const dataFieldsOrder = this.get(\"dataFieldsOrder\", []);\r\n        // Process each row item\r\n        _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.eachOrdered(dataFields, (key, _name) => {\r\n            // Get value\r\n            let value = this.convertEmptyValue(key, row[key], options);\r\n            // Convert dates\r\n            let item = asIs ? value : this.convertToSpecialFormat(key, value, options);\r\n            item = \"\" + item;\r\n            // Add to item\r\n            items.push(item);\r\n        }, (a, b) => {\r\n            //console.log(a, b)\r\n            let ai = dataFieldsOrder.indexOf(a);\r\n            let bi = dataFieldsOrder.indexOf(b);\r\n            if (ai > bi) {\r\n                return 1;\r\n            }\r\n            else if (ai < bi) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        });\r\n        return items;\r\n    }\r\n    /**\r\n     * Returns pdfmake instance.\r\n     *\r\n     * @ignore\r\n     * @return Instance of pdfmake\r\n     */\r\n    getPdfmake() {\r\n        if (pdfmakePromise === undefined) {\r\n            pdfmakePromise = _pdfmake();\r\n        }\r\n        return pdfmakePromise;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getPageSizeFit(pageSize, margins, extraMargin = 0, orientation = \"portrait\") {\r\n        // Check margins\r\n        let newMargins = [0, 0, 0, 0];\r\n        if (_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isNumber(margins)) {\r\n            newMargins = [margins, margins, margins, margins];\r\n        }\r\n        else if (margins.length == 2) {\r\n            newMargins = [margins[0], margins[1], margins[0], margins[1]];\r\n        }\r\n        else if (margins.length == 4) {\r\n            newMargins = margins;\r\n        }\r\n        // Define available page sizes\r\n        let sizes = {\r\n            \"4A0\": [4767.87, 6740.79],\r\n            \"2A0\": [3370.39, 4767.87],\r\n            A0: [2383.94, 3370.39],\r\n            A1: [1683.78, 2383.94],\r\n            A2: [1190.55, 1683.78],\r\n            A3: [841.89, 1190.55],\r\n            A4: [595.28, 841.89],\r\n            A5: [419.53, 595.28],\r\n            A6: [297.64, 419.53],\r\n            A7: [209.76, 297.64],\r\n            A8: [147.40, 209.76],\r\n            A9: [104.88, 147.40],\r\n            A10: [73.70, 104.88],\r\n            B0: [2834.65, 4008.19],\r\n            B1: [2004.09, 2834.65],\r\n            B2: [1417.32, 2004.09],\r\n            B3: [1000.63, 1417.32],\r\n            B4: [708.66, 1000.63],\r\n            B5: [498.90, 708.66],\r\n            B6: [354.33, 498.90],\r\n            B7: [249.45, 354.33],\r\n            B8: [175.75, 249.45],\r\n            B9: [124.72, 175.75],\r\n            B10: [87.87, 124.72],\r\n            C0: [2599.37, 3676.54],\r\n            C1: [1836.85, 2599.37],\r\n            C2: [1298.27, 1836.85],\r\n            C3: [918.43, 1298.27],\r\n            C4: [649.13, 918.43],\r\n            C5: [459.21, 649.13],\r\n            C6: [323.15, 459.21],\r\n            C7: [229.61, 323.15],\r\n            C8: [161.57, 229.61],\r\n            C9: [113.39, 161.57],\r\n            C10: [79.37, 113.39],\r\n            RA0: [2437.80, 3458.27],\r\n            RA1: [1729.13, 2437.80],\r\n            RA2: [1218.90, 1729.13],\r\n            RA3: [864.57, 1218.90],\r\n            RA4: [609.45, 864.57],\r\n            SRA0: [2551.18, 3628.35],\r\n            SRA1: [1814.17, 2551.18],\r\n            SRA2: [1275.59, 1814.17],\r\n            SRA3: [907.09, 1275.59],\r\n            SRA4: [637.80, 907.09],\r\n            EXECUTIVE: [521.86, 756.00],\r\n            FOLIO: [612.00, 936.00],\r\n            LEGAL: [612.00, 1008.00],\r\n            LETTER: [612.00, 792.00],\r\n            TABLOID: [792.00, 1224.00]\r\n        };\r\n        // Calculate size\r\n        let fitSize = sizes[pageSize];\r\n        if (orientation == \"landscape\") {\r\n            fitSize.reverse();\r\n        }\r\n        fitSize[0] -= newMargins[0] + newMargins[2];\r\n        fitSize[1] -= newMargins[1] + newMargins[3] + extraMargin;\r\n        return fitSize;\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * Data\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n        * Returns `true` if `dataSource` is set, and the contents are proper\r\n        * data (array).\r\n        *\r\n        * @return Has data?\r\n        */\r\n    hasData() {\r\n        const dataSource = this.get(\"dataSource\");\r\n        return _core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isArray(dataSource) && dataSource.length ? true : false;\r\n    }\r\n    /**\r\n     * Returns processed data according to format options.\r\n     *\r\n     * @param   format         Format\r\n     * @param   customOptions  Format options\r\n     * @param   renameFields   Should fields be renamed?\r\n     * @return                 Processed data\r\n     */\r\n    getData(format, customOptions, renameFields = false) {\r\n        const options = this._getFormatOptions(format, customOptions);\r\n        const dataSource = this.get(\"dataSource\", []);\r\n        let data = dataSource;\r\n        // Re-generate the data based on data fields if set\r\n        const dataFields = this.get(\"dataFields\");\r\n        if (dataFields && _core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isArray(dataSource)) {\r\n            data = [];\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(dataSource, (row) => {\r\n                if (_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isObject(row)) {\r\n                    const newRow = {};\r\n                    _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.each(dataFields, (field, value) => {\r\n                        if (dataFields[field] != null) {\r\n                            newRow[renameFields ? value : field] = this.convertToSpecialFormat(field, row[field], options);\r\n                        }\r\n                    });\r\n                    data.push(newRow);\r\n                }\r\n            });\r\n        }\r\n        const event = {\r\n            type: \"dataprocessed\",\r\n            format: format,\r\n            options: options,\r\n            data: data,\r\n            target: this\r\n        };\r\n        this.events.dispatch(\"dataprocessed\", event);\r\n        return event.data;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getDataFields(data) {\r\n        let dataFields = this.get(\"dataFields\");\r\n        if (!dataFields) {\r\n            dataFields = {};\r\n            if (_core_util_Type__WEBPACK_IMPORTED_MODULE_5__.isArray(data) && data.length) {\r\n                _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(data, (row) => {\r\n                    _core_util_Object__WEBPACK_IMPORTED_MODULE_2__.each(row, (key, _value) => {\r\n                        if (dataFields[key] == null) {\r\n                            dataFields[key] = key;\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        return dataFields;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    convertEmptyValue(_field, value, options) {\r\n        return value != null ? value : options.emptyAs;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    convertToSpecialFormat(field, value, options, keepOriginal) {\r\n        // Is this a timestamp or duration?\r\n        if (typeof value == \"number\") {\r\n            if (this.isDateField(field)) {\r\n                value = new Date(value);\r\n            }\r\n            else if (this.isNumericField(field) && this.get(\"numberFormat\")) {\r\n                return this._root.numberFormatter.format(value, this.get(\"numberFormat\"));\r\n            }\r\n            else if (this.isDurationField(field)) {\r\n                return this._root.durationFormatter.format(value, this.get(\"durationFormat\"), this.get(\"durationUnit\"));\r\n            }\r\n        }\r\n        if (value instanceof Date) {\r\n            if (options.useTimestamps) {\r\n                value = value.getTime();\r\n            }\r\n            else if (options.useLocale) {\r\n                if (!keepOriginal) {\r\n                    value = value.toLocaleString();\r\n                }\r\n            }\r\n            else {\r\n                value = this._root.dateFormatter.format(value, this.get(\"dateFormat\"));\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    isDateField(field) {\r\n        return this.get(\"dateFields\").indexOf(field) !== -1;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    isNumericField(field) {\r\n        return this.get(\"numericFields\").indexOf(field) !== -1;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    isDurationField(field) {\r\n        return this.get(\"durationFields\").indexOf(field) !== -1;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    getContentType(type) {\r\n        let contentType = \"\";\r\n        switch (type) {\r\n            case \"png\":\r\n                contentType = \"image/\" + type;\r\n                break;\r\n            case \"jpg\":\r\n                contentType = \"image/jpeg\";\r\n                break;\r\n            case \"csv\":\r\n                contentType = \"text/csv\";\r\n                break;\r\n            case \"json\":\r\n                contentType = \"application/json\";\r\n                break;\r\n            case \"html\":\r\n                contentType = \"text/html\";\r\n                break;\r\n            case \"pdf\":\r\n            case \"pdfdata\":\r\n                contentType = \"application/pdf\";\r\n                break;\r\n            case \"xlsx\":\r\n                contentType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\";\r\n                break;\r\n            default:\r\n                contentType = \"application/octet-stream\";\r\n        }\r\n        return contentType;\r\n    }\r\n    getDisposableCanvas() {\r\n        let canvas = document.createElement(\"canvas\");\r\n        canvas.style.position = \"fixed\";\r\n        canvas.style.top = \"-10000px\";\r\n        this._root.dom.appendChild(canvas);\r\n        return canvas;\r\n    }\r\n    disposeCanvas(canvas) {\r\n        this._root.dom.removeChild(canvas);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    findBackgroundColor(element) {\r\n        // Check if element has styles set\r\n        let opacity = 1;\r\n        let currentColor = getComputedStyle(element, \"background-color\").getPropertyValue(\"background-color\");\r\n        // Check opacity\r\n        if (currentColor.match(/[^,]*,[^,]*,[^,]*,[ ]?0/) || currentColor == \"transparent\") {\r\n            opacity = 0;\r\n        }\r\n        if (opacity == 0) {\r\n            let parent = element.parentElement; // || <Element>element.parentNode;\r\n            // Completely transparent. Look for a parent\r\n            if (parent) {\r\n                return this.findBackgroundColor(parent);\r\n            }\r\n            else {\r\n                return _core_util_Color__WEBPACK_IMPORTED_MODULE_6__.Color.fromHex(0xffffff);\r\n            }\r\n        }\r\n        else {\r\n            return _core_util_Color__WEBPACK_IMPORTED_MODULE_6__.Color.fromCSS(currentColor);\r\n        }\r\n    }\r\n    /**\r\n     * Triggers download of the file.\r\n     *\r\n     * @param   uri       data:uri with file content\r\n     * @param   fileName  File name\r\n     * @param   addBOM    Should download include byte order mark?\r\n     * @return            Promise\r\n     */\r\n    streamFile(uri, fileName, addBOM = false) {\r\n        if (this.blobDownloadSupport()) {\r\n            /**\r\n             * Supports Blob object.\r\n             * Use it.\r\n             */\r\n            let link = document.createElement(\"a\");\r\n            link.download = fileName;\r\n            document.body.appendChild(link);\r\n            // Extract content type and get pure data without headers\r\n            let parts = uri.split(\";\");\r\n            let contentType = parts.shift().replace(/data:/, \"\");\r\n            uri = decodeURIComponent(parts.join(\";\").replace(/^[^,]*,/, \"\"));\r\n            if ([\"image/svg+xml\", \"application/json\", \"text/csv\", \"text/html\"].indexOf(contentType) == -1) {\r\n                try {\r\n                    let decoded = atob(uri);\r\n                    uri = decoded;\r\n                }\r\n                catch (e) {\r\n                    // Error occurred, meaning string was not Base64-encoded. Do nothing.\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (addBOM) {\r\n                    uri = \"\\ufeff\" + uri;\r\n                }\r\n                let blob = new Blob([uri], { type: contentType });\r\n                let url = window.URL.createObjectURL(blob);\r\n                link.href = url;\r\n                link.download = fileName;\r\n                link.click();\r\n                setTimeout(() => {\r\n                    document.body.removeChild(link);\r\n                    window.URL.revokeObjectURL(url);\r\n                }, 100);\r\n                return true;\r\n            }\r\n            // Dissect uri into array\r\n            let chars = new Array(uri.length);\r\n            for (let i = 0; i < uri.length; ++i) {\r\n                let charCode = uri.charCodeAt(i);\r\n                chars[i] = charCode;\r\n            }\r\n            if (addBOM) {\r\n                chars = [0xEF, 0xBB, 0xBF].concat(chars);\r\n            }\r\n            let blob = new Blob([new Uint8Array(chars)], { type: contentType });\r\n            let url = window.URL.createObjectURL(blob);\r\n            link.href = url;\r\n            link.download = fileName;\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            setTimeout(() => {\r\n                window.URL.revokeObjectURL(url);\r\n            }, 100);\r\n        }\r\n        else if (this.linkDownloadSupport()) {\r\n            /**\r\n             * For regular browsers, we create a link then simulate a click on it\r\n             */\r\n            let link = document.createElement(\"a\");\r\n            link.download = fileName;\r\n            link.href = uri;\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n        }\r\n        else {\r\n            /**\r\n             * Something else - perhaps a mobile.\r\n             * Let's just display it in the same page.\r\n             * (hey we don't like it either)\r\n             */\r\n            window.location.href = uri;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    downloadSupport() {\r\n        return this.linkDownloadSupport();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    linkDownloadSupport() {\r\n        let a = document.createElement(\"a\");\r\n        let res = typeof a.download !== \"undefined\";\r\n        return res;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    blobDownloadSupport() {\r\n        return window.Blob != null;\r\n    }\r\n    /**\r\n     * ==========================================================================\r\n     * Print\r\n     * ==========================================================================\r\n     */\r\n    /**\r\n     * Initiates print of the chart.\r\n     *\r\n     * @param   data     data:uri for the image\r\n     * @param   options  Options\r\n     * @param   title    Optional title to use (uses window's title by default)\r\n     * @return           Promise\r\n     */\r\n    initiatePrint(data, customOptions, title) {\r\n        const options = this._getFormatOptions(\"print\", customOptions);\r\n        if (options.printMethod == \"css\") {\r\n            this._printViaCSS(data, options, title);\r\n        }\r\n        else {\r\n            this._printViaIframe(data, options, title);\r\n        }\r\n    }\r\n    _printViaCSS(data, customOptions, title) {\r\n        const options = this._getFormatOptions(\"print\", customOptions);\r\n        let delay = options.delay || 500;\r\n        //Save current scroll position\r\n        let scroll = document.documentElement.scrollTop || document.body.scrollTop;\r\n        // Hide all document nodes by applyin custom CSS\r\n        let rule = new _core_util_Utils__WEBPACK_IMPORTED_MODULE_7__.StyleRule(_core_util_Utils__WEBPACK_IMPORTED_MODULE_7__.getShadowRoot(this._root.dom), \"body > *\", {\r\n            \"display\": \"none\",\r\n            \"position\": \"fixed\",\r\n            \"visibility\": \"hidden\",\r\n            \"opacity\": \"0\",\r\n            \"clipPath\": \"polygon(0px 0px,0px 0px,0px 0px,0px 0px);\"\r\n        }, this._root.nonce);\r\n        // Replace title?\r\n        let originalTitle;\r\n        if (title && document && document.title) {\r\n            originalTitle = document.title;\r\n            document.title = title;\r\n        }\r\n        // Create and add exported image\r\n        let img = new Image();\r\n        img.src = data;\r\n        img.style.maxWidth = \"100%\";\r\n        img.style.display = \"block\";\r\n        img.style.position = \"relative\";\r\n        img.style.visibility = \"visible\";\r\n        img.style.opacity = \"1\";\r\n        img.style.clipPath = \"none\";\r\n        document.body.appendChild(img);\r\n        // Print\r\n        this.setTimeout(() => {\r\n            window.print();\r\n        }, 50);\r\n        // Delay needs to be at least a second for iOS devices\r\n        let isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n        if (isIOS && (delay < 1000)) {\r\n            delay = 1000;\r\n        }\r\n        else if (delay < 100) {\r\n            delay = 100;\r\n        }\r\n        // Delay function that resets back the document the way ot was before\r\n        this.setTimeout(() => {\r\n            // Remove image\r\n            document.body.removeChild(img);\r\n            // Reset back all elements\r\n            /*for (let len = items.length, i = 0; i < len; i++) {\r\n                let item = <HTMLElement>items[i];\r\n                if ($dom.isElement(item)) {\r\n                    item.style.display = states[i];\r\n                }\r\n            }*/\r\n            rule.dispose();\r\n            // Restore title\r\n            if (originalTitle) {\r\n                document.title = document.title;\r\n            }\r\n            // Scroll back the document the way it was before\r\n            document.documentElement.scrollTop = document.body.scrollTop = scroll;\r\n        }, delay || 500);\r\n    }\r\n    _printViaIframe(data, customOptions, title) {\r\n        const options = this._getFormatOptions(\"print\", customOptions);\r\n        let delay = options.delay || 500;\r\n        // Create an iframe\r\n        const iframe = document.createElement(\"iframe\");\r\n        iframe.style.visibility = \"hidden\";\r\n        document.body.appendChild(iframe);\r\n        // This is needed for FireFox\r\n        iframe.contentWindow.document.open();\r\n        iframe.contentWindow.document.close();\r\n        // Create and add exported image\r\n        let img = new Image();\r\n        img.src = data;\r\n        img.style.maxWidth = \"100%\";\r\n        img.style.height = \"auto\";\r\n        if (title) {\r\n            iframe.contentWindow.document.title = title;\r\n        }\r\n        iframe.contentWindow.document.body.appendChild(img);\r\n        iframe.load = function () {\r\n            iframe.contentWindow.document.body.appendChild(img);\r\n        };\r\n        // Print\r\n        this.setTimeout(() => {\r\n            try {\r\n                if (!iframe.contentWindow.document.execCommand(\"print\", false, null)) {\r\n                    iframe.contentWindow.print();\r\n                }\r\n            }\r\n            catch (e) {\r\n                iframe.contentWindow.print();\r\n            }\r\n        }, delay || 50);\r\n        // Delay needs to be at least a second for iOS devices\r\n        let isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\r\n        if (isIOS && (delay < 1000)) {\r\n            delay = 1000;\r\n        }\r\n        else if (delay < 100) {\r\n            delay = 100;\r\n        }\r\n        // Delay function that resets back the document the way ot was before\r\n        this.setTimeout(() => {\r\n            // Remove image\r\n            document.body.removeChild(iframe);\r\n        }, delay + 50 || 100);\r\n    }\r\n    /**\r\n     * Returns a list of formats that can be exported in current browser.\r\n     *\r\n     * @return Formats\r\n     */\r\n    supportedFormats() {\r\n        const res = [];\r\n        const hasData = this.hasData();\r\n        const downloadSupport = this.downloadSupport();\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each([\"png\", \"jpg\", \"canvas\", \"pdf\", \"xlsx\", \"csv\", \"json\", \"html\", \"pdfdata\", \"print\"], (format) => {\r\n            const options = this._getFormatOptions(format);\r\n            if (options.disabled !== true) {\r\n                if ([\"xlsx\", \"csv\", \"json\", \"html\", \"pdfdata\"].indexOf(format) == -1 || (hasData && downloadSupport)) {\r\n                    res.push(format);\r\n                }\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n    /**\r\n     * Returns a list of supported export types: image or print.\r\n     *\r\n     * @return Supported types\r\n     */\r\n    supportedExportTypes() {\r\n        const res = [\"image\", \"print\"];\r\n        if (this.downloadSupport() && this.hasData()) {\r\n            res.push(\"data\");\r\n        }\r\n        return res;\r\n    }\r\n}\r\nObject.defineProperty(Exporting, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"Exporting\"\r\n});\r\nObject.defineProperty(Exporting, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_util_Entity__WEBPACK_IMPORTED_MODULE_1__.Entity.classNames.concat([Exporting.className])\r\n});\r\n//# sourceMappingURL=Exporting.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Exporting.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingCSS.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingCSS.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n/* harmony import */ var _core_util_Disposer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/util/Disposer */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js\");\n\r\n\r\n/**\r\n * @ignore\r\n */\r\nlet rules;\r\n/**\r\n * @ignore\r\n */\r\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(element, root, _prefix) {\r\n    //const newPrefix = (prefix ? prefix : \"am5\");\r\n    //let colorSet = new InterfaceColorSet();\r\n    const ic = root.interfaceColors;\r\n    if (!rules) {\r\n        const disposer = new _core_util_Disposer__WEBPACK_IMPORTED_MODULE_0__.MultiDisposer([\r\n            /*new StyleRule(\".${newPrefix}-menu\", {\r\n                \"opacity\": \"0.3\",\r\n                \"transition\": \"all 100ms ease-in-out\",\r\n            }),\r\n\r\n            new StyleRule(\"div:hover .${newPrefix}-menu, .${newPrefix}-menu.active\", {\r\n                \"opacity\": \"0.9\",\r\n            }),*/\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu\", {\r\n                \"color\": ic.get(\"secondaryButtonText\").toCSS(),\r\n                \"font-size\": \"0.8em\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu *\", {\r\n                \"box-sizing\": \"border-box\",\r\n                \"transition\": \"all 100ms ease-in-out\",\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu a\", {\r\n                \"display\": \"block\",\r\n                \"cursor\": \"pointer\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-type-separator\", {\r\n                \"color\": ic.get(\"disabled\").toCSS(),\r\n                \"border-bottom\": \"1px solid \" + ic.get(\"secondaryButtonDown\").toCSS(),\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-label-alt\", {\r\n                \"color\": ic.get(\"disabled\").toCSS(),\r\n                \"font-size\": \"0.8em\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu .am5exporting-type-separator a\", {\r\n                \"cursor\": \"default\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu .am5exporting-type-separator a:hover\", {\r\n                \"background\": \"initial\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu\", {\r\n                \"position\": \"absolute\",\r\n                \"z-index\": \"10\"\r\n            }),\r\n            // new StyleRule(element, \".am5exporting-list:before\", {\r\n            // \t// \"display\": \"block\",\r\n            // \t\"width\": \"20px\",\r\n            // \t\"height\": \"20px\",\r\n            // \t\"content\": \"url(\\\"data:image/svg+xml; utf8, <svg fill=\\\"#f00\\\" height=\\\"20\\\" width=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z\\\"/></svg>\\\")\"\r\n            // }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-icon\", {\r\n                \"width\": \"30px\",\r\n                \"height\": \"26px\",\r\n                \"position\": \"absolute\",\r\n                \"margin\": \"5px\",\r\n                \"padding\": \"3px 5px\",\r\n                \"border-radius\": \"3px\",\r\n                \"opacity\": \"0.5\",\r\n                \"background\": \"rgba(255, 255, 255, 0.001)\",\r\n                \"background-opacity\": \"0\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-icon:focus, .am5exporting-icon:hover, .am5exporting-menu-open .am5exporting-icon\", {\r\n                \"background\": ic.get(\"secondaryButtonHover\").toCSS(),\r\n                \"opacity\": \"1\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu path\", {\r\n                \"fill\": ic.get(\"secondaryButtonText\").toCSS()\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-list\", {\r\n                \"display\": \"none\",\r\n                \"list-style\": \"none\",\r\n                \"list-style-type\": \"none\",\r\n                \"margin\": \"5px\",\r\n                \"background\": ic.get(\"secondaryButton\").toCSS(),\r\n                \"padding\": \"5px 0\",\r\n                \"border\": \"1px solid \" + ic.get(\"secondaryButtonStroke\").toCSS(),\r\n                \"border-radius\": \"3px\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu-open .am5exporting-list\", {\r\n                \"display\": \"block\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-item\", {}),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-item a\", {\r\n                \"padding\": \"3px 15px\",\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-item a:hover, .am5exporting-item a.am5exporting-item-active\", {\r\n                \"background\": ic.get(\"secondaryButtonHover\").toCSS(),\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu.am5exporting-align-left, .am5exporting-icon.am5exporting-align-left, .am5exporting-list.am5exporting-align-left\", {\r\n                \"left\": \"0\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu.am5exporting-align-right, .am5exporting-icon.am5exporting-align-right, .am5exporting-list.am5exporting-align-right\", {\r\n                \"right\": \"0\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu.am5exporting-valign-top, .am5exporting-icon.am5exporting-valign-top, .am5exporting-list.am5exporting-align-top\", {\r\n                \"top\": \"0\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-menu.am5exporting-valign-bottom, .am5exporting-icon.am5exporting-valign-bottom, .am5exporting-list.am5exporting-align-bottom\", {\r\n                \"bottom\": \"0\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-list.am5exporting-align-left\", {\r\n                \"margin-left\": \"40px\"\r\n            }),\r\n            new _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.StyleRule(element, \".am5exporting-list.am5exporting-align-right\", {\r\n                \"margin-right\": \"40px\"\r\n            }),\r\n            // new StyleRule(element, \".${newPrefix}-menu-level-0\", {\r\n            // \t\"position\": \"absolute\",\r\n            // \t\"top\": \"5px\",\r\n            // \t\"right\": \"5px\",\r\n            // })\r\n        ]);\r\n        rules = new _core_util_Disposer__WEBPACK_IMPORTED_MODULE_0__.CounterDisposer(() => {\r\n            rules = undefined;\r\n            disposer.dispose();\r\n        });\r\n    }\r\n    return rules.increment();\r\n}\r\n//# sourceMappingURL=ExportingCSS.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingCSS.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingMenu.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingMenu.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ExportingMenu: () => (/* binding */ ExportingMenu)\n/* harmony export */ });\n/* harmony import */ var _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/util/Entity */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js\");\n/* harmony import */ var _core_util_Disposer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Disposer */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js\");\n/* harmony import */ var _ExportingCSS__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ExportingCSS */ \"./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingCSS.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n/* harmony import */ var _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Utils */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Utils.js\");\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Displays a menu for [[Exporting]].\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/concepts/exporting/} for more info\r\n */\r\nclass ExportingMenu extends _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__.Entity {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_menuElement\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_iconElement\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_listElement\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_itemElements\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"_itemDisposers\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: []\r\n        });\r\n        Object.defineProperty(this, \"_cssDisposer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_activeItem\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"isOpen\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n        Object.defineProperty(this, \"_isOver\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: false\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this._setRawDefault(\"container\", this._root._inner);\r\n        this._setRawDefault(\"align\", \"right\");\r\n        this._setRawDefault(\"valign\", \"top\");\r\n        this._setRawDefault(\"useDefaultCSS\", true);\r\n        this._setRawDefault(\"autoClose\", true);\r\n        this._setRawDefault(\"deactivateRoot\", true);\r\n        this._setRawDefault(\"items\", [{\r\n                type: \"separator\",\r\n                label: this._t(\"Export\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"png\",\r\n                exportType: \"image\",\r\n                label: this._t(\"PNG\"),\r\n                sublabel: this._t(\"Image\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"jpg\",\r\n                exportType: \"image\",\r\n                label: this._t(\"JPG\"),\r\n                sublabel: this._t(\"Image\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"pdf\",\r\n                exportType: \"image\",\r\n                label: this._t(\"PDF\"),\r\n                sublabel: this._t(\"Image\")\r\n            }, {\r\n                type: \"separator\",\r\n                exportType: \"data\",\r\n                //label: this._t(\"Data\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"json\",\r\n                exportType: \"data\",\r\n                label: this._t(\"JSON\"),\r\n                sublabel: this._t(\"Data\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"csv\",\r\n                exportType: \"data\",\r\n                label: this._t(\"CSV\"),\r\n                sublabel: this._t(\"Data\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"xlsx\",\r\n                exportType: \"data\",\r\n                label: this._t(\"XLSX\"),\r\n                sublabel: this._t(\"Data\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"pdfdata\",\r\n                exportType: \"data\",\r\n                label: this._t(\"PDF\"),\r\n                sublabel: this._t(\"Data\")\r\n            }, {\r\n                type: \"format\",\r\n                format: \"html\",\r\n                exportType: \"data\",\r\n                label: this._t(\"HTML\"),\r\n                sublabel: this._t(\"Data\")\r\n            }, {\r\n                type: \"separator\"\r\n            }, {\r\n                type: \"format\",\r\n                format: \"print\",\r\n                exportType: \"print\",\r\n                label: this._t(\"Print\")\r\n            }]);\r\n        const menuElement = document.createElement(\"div\");\r\n        this._menuElement = menuElement;\r\n        this.setPrivate(\"menuElement\", this._menuElement);\r\n        const iconElement = document.createElement(\"a\");\r\n        this._iconElement = iconElement;\r\n        this._listElement = document.createElement(\"ul\");\r\n        this._listElement.setAttribute(\"role\", \"menu\");\r\n        this.setPrivate(\"listElement\", this._listElement);\r\n        this._applyClassNames();\r\n        iconElement.innerHTML = '<svg fill=\"none\" height=\"20\" width=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M6 10a2 2 0 11-4 0 2 2 0 014 0zM12 10a2 2 0 11-4 0 2 2 0 014 0zM16 12a2 2 0 100-4 2 2 0 000 4z\"/></svg>';\r\n        iconElement.setAttribute(\"tabindex\", this._root.tabindex.toString());\r\n        iconElement.setAttribute(\"aria-label\", this._t(\"Export\") + \"; \" + this._t(\"Press ENTER to open\"));\r\n        iconElement.setAttribute(\"role\", \"button\");\r\n        if (_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.supports(\"keyboardevents\")) {\r\n            this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(document, \"keydown\", (ev) => {\r\n                if (document.activeElement == this._iconElement || this.isOpen) {\r\n                    if (ev.keyCode == 27) {\r\n                        // ESC\r\n                        this.close();\r\n                    }\r\n                    else if (ev.keyCode == 13) {\r\n                        // ENTER\r\n                        if (this._activeItem) {\r\n                            this._handleClick(this._activeItem);\r\n                        }\r\n                        else {\r\n                            this.toggle();\r\n                        }\r\n                    }\r\n                    else if (ev.keyCode == 38 || ev.keyCode == 40) {\r\n                        const items = this.get(\"items\", []);\r\n                        let currentIndex = items.indexOf(this._activeItem);\r\n                        if (this.get(\"valign\") == \"top\" && currentIndex == -1) {\r\n                            currentIndex = items.length;\r\n                        }\r\n                        const dir = ev.keyCode == 38 ? -1 : 1;\r\n                        let newIndex = currentIndex + dir;\r\n                        let newItem;\r\n                        do {\r\n                            if (newIndex < 0) {\r\n                                newIndex = items.length - 1;\r\n                            }\r\n                            else if (newIndex > (items.length - 1)) {\r\n                                newIndex = 0;\r\n                            }\r\n                            if (items[newIndex].type == \"separator\") {\r\n                                newIndex += dir;\r\n                            }\r\n                            else {\r\n                                newItem = items[newIndex];\r\n                            }\r\n                        } while (!newItem);\r\n                        if (newItem) {\r\n                            this._handleItemFocus(newItem);\r\n                        }\r\n                    }\r\n                }\r\n            }));\r\n        }\r\n        this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(iconElement, \"click\", (ev) => {\r\n            ev.stopImmediatePropagation();\r\n            this.toggle();\r\n        }));\r\n        menuElement.appendChild(this._iconElement);\r\n        menuElement.appendChild(this._listElement);\r\n        const container = this.get(\"container\", this._root._inner);\r\n        container.appendChild(this._menuElement);\r\n        this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(menuElement, _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.getRendererEvent(\"pointerover\"), (_ev) => {\r\n            this._isOver = true;\r\n            if (this.get(\"deactivateRoot\")) {\r\n                this._root._renderer.interactionsEnabled = false;\r\n            }\r\n        }));\r\n        this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(menuElement, _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.getRendererEvent(\"pointerout\"), (_ev) => {\r\n            if (this.get(\"deactivateRoot\") && (this.isOpen || this._isOver)) {\r\n                this._root._renderer.interactionsEnabled = true;\r\n            }\r\n            this._isOver = false;\r\n        }));\r\n        this._disposers.push(new _core_util_Disposer__WEBPACK_IMPORTED_MODULE_2__.Disposer(() => {\r\n            if (this._menuElement) {\r\n                container.removeChild(this._menuElement);\r\n            }\r\n        }));\r\n        this._disposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(document, \"click\", (_ev) => {\r\n            if (this.isOpen && !this._isOver) {\r\n                this.close();\r\n            }\r\n        }));\r\n        this.loadDefaultCSS();\r\n        this._root.addDisposer(this);\r\n        this.events.dispatch(\"menucreated\", {\r\n            type: \"menucreated\",\r\n            target: this\r\n        });\r\n    }\r\n    _afterChanged() {\r\n        super._afterChanged();\r\n        if (this._itemElements.length == 0) {\r\n            this.createItems();\r\n        }\r\n        if (this.isDirty(\"useDefaultCSS\")) {\r\n            if (this.get(\"useDefaultCSS\")) {\r\n                this.loadDefaultCSS();\r\n            }\r\n            else if (this._cssDisposer) {\r\n                this._cssDisposer.dispose();\r\n            }\r\n        }\r\n        if (this.isDirty(\"exporting\")) {\r\n            const exporting = this.get(\"exporting\");\r\n            if (exporting) {\r\n                this.createItems();\r\n            }\r\n        }\r\n        if (this.isDirty(\"align\") || this.isDirty(\"valign\")) {\r\n            this._applyClassNames();\r\n        }\r\n        if (this.isDirty(\"container\")) {\r\n            const container = this.get(\"container\");\r\n            if (container) {\r\n                container.appendChild(this._menuElement);\r\n            }\r\n        }\r\n    }\r\n    _dispose() {\r\n        super._dispose();\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this._itemDisposers, (x) => {\r\n            x.dispose();\r\n        });\r\n    }\r\n    _applyClassNames() {\r\n        const align = this.get(\"align\", \"right\");\r\n        const valign = this.get(\"valign\", \"top\");\r\n        const status = this.isOpen ? \"am5exporting-menu-open\" : \"am5exporting-menu-closed\";\r\n        this._menuElement.className = \"am5exporting am5exporting-menu am5exporting-align-\" + align + \" am5exporting-valign-\" + valign + \" \" + status;\r\n        this._iconElement.className = \"am5exporting am5exporting-icon am5exporting-align-\" + align + \" am5exporting-valign-\" + valign;\r\n        this._listElement.className = \"am5exporting am5exporting-list am5exporting-align-\" + align + \" am5exporting-valign-\" + valign;\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    createItems() {\r\n        const exporting = this.get(\"exporting\");\r\n        if (!exporting) {\r\n            return;\r\n        }\r\n        this._listElement.innerHTML = \"\";\r\n        this._itemElements = [];\r\n        const items = this.get(\"items\", []);\r\n        const supportedFormats = exporting.supportedFormats();\r\n        const supportedExportTypes = exporting.supportedExportTypes();\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(this._itemDisposers, (x) => {\r\n            x.dispose();\r\n        });\r\n        this._itemDisposers.length = 0;\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(items, (item) => {\r\n            if (item.format && supportedFormats.indexOf(item.format) == -1) {\r\n                return;\r\n            }\r\n            if (item.exportType && supportedExportTypes.indexOf(item.exportType) == -1) {\r\n                return;\r\n            }\r\n            const li = document.createElement(\"li\");\r\n            li.setAttribute(\"role\", \"menuitem\");\r\n            li.className = \"am5exporting am5exporting-item am5exporting-type-\" + item.type;\r\n            if (item.format) {\r\n                li.className += \" am5exporting-format-\" + item.format;\r\n            }\r\n            const a = document.createElement(\"a\");\r\n            let ariaLabel = this._t(\"Export\");\r\n            if (item.label) {\r\n                a.innerHTML = item.label;\r\n                ariaLabel += \" \" + item.label;\r\n            }\r\n            if (item.sublabel) {\r\n                a.innerHTML += \" <span class=\\\"am5exporting-label-alt\\\">\" + item.sublabel + \"</span>\";\r\n                ariaLabel += \" (\" + item.sublabel + \")\";\r\n            }\r\n            if (item.callback) {\r\n                this._itemDisposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(a, \"click\", (_ev) => {\r\n                    item.callback.call(item.callbackTarget || this);\r\n                }));\r\n                a.setAttribute(\"tabindex\", this._root.tabindex.toString());\r\n            }\r\n            else if (item.format && exporting) {\r\n                this._itemDisposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(a, \"click\", (_ev) => {\r\n                    this._handleClick(item);\r\n                }));\r\n                this._itemDisposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(a, \"focus\", (_ev) => {\r\n                    this._handleItemFocus(item);\r\n                }));\r\n                this._itemDisposers.push(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.addEventListener(a, \"blur\", (_ev) => {\r\n                    this._handleItemBlur(item);\r\n                }));\r\n                a.setAttribute(\"tabindex\", this._root.tabindex.toString());\r\n                a.setAttribute(\"aria-label\", ariaLabel);\r\n            }\r\n            item.element = a;\r\n            li.appendChild(a);\r\n            this._listElement.appendChild(li);\r\n            this._itemElements.push(li);\r\n        });\r\n    }\r\n    _handleClick(item) {\r\n        const exporting = this.get(\"exporting\");\r\n        if (this.get(\"autoClose\")) {\r\n            this.close();\r\n        }\r\n        if (item.format == \"print\") {\r\n            exporting.print();\r\n        }\r\n        else {\r\n            exporting.download(item.format);\r\n        }\r\n    }\r\n    _handleItemFocus(item) {\r\n        if (item != this._activeItem) {\r\n            if (this._activeItem) {\r\n                this._activeItem.element.className = \"\";\r\n            }\r\n            this._activeItem = item;\r\n            item.element.className = \"am5exporting-item-active\";\r\n            item.element.focus();\r\n        }\r\n    }\r\n    _handleItemBlur(item) {\r\n        item.element.className = \"\";\r\n        if (item == this._activeItem) {\r\n            this._activeItem = undefined;\r\n        }\r\n        this.setTimeout(() => {\r\n            if (!document.activeElement || !_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.contains(this.get(\"container\"), document.activeElement)) {\r\n                this.close();\r\n            }\r\n        }, 10);\r\n    }\r\n    /**\r\n     * Loads the default CSS.\r\n     *\r\n     * @ignore Exclude from docs\r\n     */\r\n    loadDefaultCSS() {\r\n        const disposer = (0,_ExportingCSS__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(_core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.getShadowRoot(this._root.dom), this._root);\r\n        this._disposers.push(disposer);\r\n        this._cssDisposer = disposer;\r\n        // if (this._element) {\r\n        // \tthis._element.style.display = \"\";\r\n        // }\r\n    }\r\n    /**\r\n     * Opens menu.\r\n     */\r\n    open() {\r\n        this.isOpen = true;\r\n        this._applyClassNames();\r\n        this.events.dispatch(\"menuopened\", {\r\n            type: \"menuopened\",\r\n            target: this\r\n        });\r\n    }\r\n    /**\r\n     * Closes menu.\r\n     */\r\n    close() {\r\n        this.isOpen = false;\r\n        if (this.get(\"deactivateRoot\")) {\r\n            this._root._renderer.interactionsEnabled = true;\r\n        }\r\n        _core_util_Utils__WEBPACK_IMPORTED_MODULE_1__.blur();\r\n        this._applyClassNames();\r\n        this.events.dispatch(\"menuclosed\", {\r\n            type: \"menuclosed\",\r\n            target: this\r\n        });\r\n    }\r\n    /**\r\n     * Toggles menu open and close.\r\n     */\r\n    toggle() {\r\n        if (this.isOpen) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(ExportingMenu, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"ExportingMenu\"\r\n});\r\nObject.defineProperty(ExportingMenu, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__.Entity.classNames.concat([ExportingMenu.className])\r\n});\r\n//# sourceMappingURL=ExportingMenu.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingMenu.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/plugins/exporting.js":
/*!***************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/plugins/exporting.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Annotator: () => (/* reexport safe */ _internal_plugins_exporting_Annotator__WEBPACK_IMPORTED_MODULE_2__.Annotator),\n/* harmony export */   Exporting: () => (/* reexport safe */ _internal_plugins_exporting_Exporting__WEBPACK_IMPORTED_MODULE_0__.Exporting),\n/* harmony export */   ExportingMenu: () => (/* reexport safe */ _internal_plugins_exporting_ExportingMenu__WEBPACK_IMPORTED_MODULE_1__.ExportingMenu)\n/* harmony export */ });\n/* harmony import */ var _internal_plugins_exporting_Exporting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../.internal/plugins/exporting/Exporting */ \"./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Exporting.js\");\n/* harmony import */ var _internal_plugins_exporting_ExportingMenu__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../.internal/plugins/exporting/ExportingMenu */ \"./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/ExportingMenu.js\");\n/* harmony import */ var _internal_plugins_exporting_Annotator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../.internal/plugins/exporting/Annotator */ \"./node_modules/@amcharts/amcharts5/.internal/plugins/exporting/Annotator.js\");\n\r\n\r\n\r\n//# sourceMappingURL=exporting.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/plugins/exporting.js?");

/***/ })

}]);