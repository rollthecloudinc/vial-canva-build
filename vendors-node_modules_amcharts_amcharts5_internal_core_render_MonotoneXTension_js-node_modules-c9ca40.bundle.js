"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcbdc_carbon_reporting_dashboard"] = self["webpackChunkcbdc_carbon_reporting_dashboard"] || []).push([["vendors-node_modules_amcharts_amcharts5_internal_core_render_MonotoneXTension_js-node_modules-c9ca40"],{

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MonotoneXTension: () => (/* binding */ MonotoneXTension),\n/* harmony export */   curveMonotoneXTension: () => (/* binding */ curveMonotoneXTension)\n/* harmony export */ });\n/**\r\n * @ignore\r\n */\r\nclass MonotoneXTension {\r\n    constructor(context, tension) {\r\n        Object.defineProperty(this, \"_line\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_point\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_context\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_x0\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_x1\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_y0\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_y1\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_t0\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_tension\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        this._context = context;\r\n        this._tension = tension;\r\n    }\r\n    areaStart() {\r\n        this._line = 0;\r\n    }\r\n    areaEnd() {\r\n        this._line = NaN;\r\n    }\r\n    lineStart() {\r\n        this._x0 = this._x1 =\r\n            this._y0 = this._y1 =\r\n                this._t0 = NaN;\r\n        this._point = 0;\r\n    }\r\n    lineEnd() {\r\n        switch (this._point) {\r\n            case 2:\r\n                this._context.lineTo(this._x1, this._y1);\r\n                break;\r\n            case 3:\r\n                point(this, this._t0, slope2(this, this._t0));\r\n                break;\r\n        }\r\n        if (this._line || (this._line !== 0 && this._point === 1))\r\n            this._context.closePath();\r\n        this._line = 1 - this._line;\r\n    }\r\n    point(x, y) {\r\n        let t1 = NaN;\r\n        x = +x, y = +y;\r\n        if (x === this._x1 && y === this._y1)\r\n            return; // Ignore coincident points.\r\n        switch (this._point) {\r\n            case 0:\r\n                this._point = 1;\r\n                this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);\r\n                break;\r\n            case 1:\r\n                this._point = 2;\r\n                break;\r\n            case 2:\r\n                this._point = 3;\r\n                point(this, slope2(this, t1 = slope3(this, x, y)), t1);\r\n                break;\r\n            default:\r\n                point(this, this._t0, t1 = slope3(this, x, y));\r\n                break;\r\n        }\r\n        this._x0 = this._x1, this._x1 = x;\r\n        this._y0 = this._y1, this._y1 = y;\r\n        this._t0 = t1;\r\n    }\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction curveMonotoneXTension(tension) {\r\n    function monotoneXTension(context) {\r\n        return new MonotoneXTension(context, tension);\r\n    }\r\n    return monotoneXTension;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction slope3(that, x2, y2) {\r\n    let h0 = (that._x1 - that._x0);\r\n    let h1 = (x2 - that._x1);\r\n    let s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\r\n    let s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\r\n    let p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction slope2(that, t) {\r\n    let h = that._x1 - that._x0;\r\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction point(that, t0, t1) {\r\n    let x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);\r\n    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);\r\n}\r\n//# sourceMappingURL=MonotoneXTension.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneXTension.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneYTension.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneYTension.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MonotoneYTension: () => (/* binding */ MonotoneYTension),\n/* harmony export */   curveMonotoneYTension: () => (/* binding */ curveMonotoneYTension)\n/* harmony export */ });\n/**\r\n * @ignore\r\n */\r\nclass MonotoneYTension {\r\n    constructor(context, tension) {\r\n        Object.defineProperty(this, \"_line\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_point\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_context\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n        Object.defineProperty(this, \"_x0\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_x1\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_y0\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_y1\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_t0\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        Object.defineProperty(this, \"_tension\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: 0\r\n        });\r\n        this._context = context;\r\n        this._tension = tension;\r\n    }\r\n    areaStart() {\r\n        this._line = 0;\r\n    }\r\n    areaEnd() {\r\n        this._line = NaN;\r\n    }\r\n    lineStart() {\r\n        this._x0 = this._x1 =\r\n            this._y0 = this._y1 =\r\n                this._t0 = NaN;\r\n        this._point = 0;\r\n    }\r\n    lineEnd() {\r\n        switch (this._point) {\r\n            case 2:\r\n                this._context.lineTo(this._x1, this._y1);\r\n                break;\r\n            case 3:\r\n                point(this, this._t0, slope2(this, this._t0));\r\n                break;\r\n        }\r\n        if (this._line || (this._line !== 0 && this._point === 1))\r\n            this._context.closePath();\r\n        this._line = 1 - this._line;\r\n    }\r\n    point(x, y) {\r\n        [x, y] = [y, x];\r\n        let t1 = NaN;\r\n        x = +x, y = +y;\r\n        if (x === this._x1 && y === this._y1)\r\n            return; // Ignore coincident points.\r\n        switch (this._point) {\r\n            case 0:\r\n                this._point = 1;\r\n                this._line ? this._context.lineTo(y, x) : this._context.moveTo(y, x);\r\n                break;\r\n            case 1:\r\n                this._point = 2;\r\n                break;\r\n            case 2:\r\n                this._point = 3;\r\n                point(this, slope2(this, t1 = slope3(this, x, y)), t1);\r\n                break;\r\n            default:\r\n                point(this, this._t0, t1 = slope3(this, x, y));\r\n                break;\r\n        }\r\n        this._x0 = this._x1, this._x1 = x;\r\n        this._y0 = this._y1, this._y1 = y;\r\n        this._t0 = t1;\r\n    }\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction curveMonotoneYTension(tension) {\r\n    function monotoneYTension(context) {\r\n        return new MonotoneYTension(context, tension);\r\n    }\r\n    monotoneYTension.tension = function (tension) {\r\n        return curveMonotoneYTension(+tension);\r\n    };\r\n    return monotoneYTension;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : 1;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction slope3(that, x2, y2) {\r\n    let h0 = (that._x1 - that._x0);\r\n    let h1 = (x2 - that._x1);\r\n    let s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0);\r\n    let s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0);\r\n    let p = (s0 * h1 + s1 * h0) / (h0 + h1);\r\n    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction slope2(that, t) {\r\n    let h = that._x1 - that._x0;\r\n    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;\r\n}\r\n/**\r\n * @ignore\r\n */\r\nfunction point(that, t0, t1) {\r\n    let x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 1.5 * (1 - that._tension);\r\n    that._context.bezierCurveTo(y0 + dx * t0, x0 + dx, y1 - dx * t1, x1 - dx, y1, x1);\r\n}\r\n//# sourceMappingURL=MonotoneYTension.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/core/render/MonotoneYTension.js?");

/***/ }),

/***/ "./node_modules/d3-shape/src/curve/cardinal.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/cardinal.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Cardinal: () => (/* binding */ Cardinal),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   point: () => (/* binding */ point)\n/* harmony export */ });\nfunction point(that, x, y) {\n  that._context.bezierCurveTo(\n    that._x1 + that._k * (that._x2 - that._x0),\n    that._y1 + that._k * (that._y2 - that._y0),\n    that._x2 + that._k * (that._x1 - x),\n    that._y2 + that._k * (that._y1 - y),\n    that._x2,\n    that._y2\n  );\n}\n\nfunction Cardinal(context, tension) {\n  this._context = context;\n  this._k = (1 - tension) / 6;\n}\n\nCardinal.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 =\n    this._y0 = this._y1 = this._y2 = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2: this._context.lineTo(this._x2, this._y2); break;\n      case 3: point(this, this._x1, this._y1); break;\n    }\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;\n      case 2: this._point = 3; // falls through\n      default: point(this, x, y); break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;\n    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((function custom(tension) {\n\n  function cardinal(context) {\n    return new Cardinal(context, tension);\n  }\n\n  cardinal.tension = function(tension) {\n    return custom(+tension);\n  };\n\n  return cardinal;\n})(0));\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-shape/src/curve/cardinal.js?");

/***/ }),

/***/ "./node_modules/d3-shape/src/curve/step.js":
/*!*************************************************!*\
  !*** ./node_modules/d3-shape/src/curve/step.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   stepAfter: () => (/* binding */ stepAfter),\n/* harmony export */   stepBefore: () => (/* binding */ stepBefore)\n/* harmony export */ });\nfunction Step(context, t) {\n  this._context = context;\n  this._t = t;\n}\n\nStep.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN;\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);\n    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();\n    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;\n  },\n  point: function(x, y) {\n    x = +x, y = +y;\n    switch (this._point) {\n      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;\n      case 1: this._point = 2; // falls through\n      default: {\n        if (this._t <= 0) {\n          this._context.lineTo(this._x, y);\n          this._context.lineTo(x, y);\n        } else {\n          var x1 = this._x * (1 - this._t) + x * this._t;\n          this._context.lineTo(x1, this._y);\n          this._context.lineTo(x1, y);\n        }\n        break;\n      }\n    }\n    this._x = x, this._y = y;\n  }\n};\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(context) {\n  return new Step(context, 0.5);\n}\n\nfunction stepBefore(context) {\n  return new Step(context, 0);\n}\n\nfunction stepAfter(context) {\n  return new Step(context, 1);\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-shape/src/curve/step.js?");

/***/ })

}]);