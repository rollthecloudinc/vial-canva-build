"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcbdc_carbon_reporting_dashboard"] = self["webpackChunkcbdc_carbon_reporting_dashboard"] || []).push([["json_plugins_sliceGrouper"],{

/***/ "./node_modules/@amcharts/amcharts5/.internal/plugins/sliceGrouper/SliceGrouper.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/plugins/sliceGrouper/SliceGrouper.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SliceGrouper: () => (/* binding */ SliceGrouper)\n/* harmony export */ });\n/* harmony import */ var _core_render_Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/render/Button */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Button.js\");\n/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/render/Graphics */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js\");\n/* harmony import */ var _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/util/Entity */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Entity.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n\r\n\r\n\r\n\r\n/**\r\n * A plugin that can be used to automatically group small slices on percent\r\n * charts into a single slice.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/grouping-slices/} for more info\r\n */\r\nclass SliceGrouper extends _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__.Entity {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * A button that is shown when chart small buttons are visible.\r\n         */\r\n        Object.defineProperty(this, \"zoomOutButton\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this._setRawDefault(\"threshold\", 5);\r\n        this._setRawDefault(\"groupName\", \"Other\");\r\n        this._setRawDefault(\"clickBehavior\", \"none\");\r\n        this.initZoomButton();\r\n        this._root.addDisposer(this);\r\n    }\r\n    initZoomButton() {\r\n        const clickBehavior = this.get(\"clickBehavior\");\r\n        if (clickBehavior !== \"none\") {\r\n            const container = this.root.tooltipContainer;\r\n            this.zoomOutButton = container.children.push(_core_render_Button__WEBPACK_IMPORTED_MODULE_1__.Button.new(this._root, {\r\n                themeTags: [\"zoom\"],\r\n                icon: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics.new(this._root, {\r\n                    themeTags: [\"button\", \"icon\"]\r\n                })\r\n            }));\r\n            this.zoomOutButton.hide();\r\n            this.zoomOutButton.events.on(\"click\", () => {\r\n                this.zoomOut();\r\n            });\r\n        }\r\n    }\r\n    handleData() {\r\n        const series = this.get(\"series\");\r\n        if (series) {\r\n            // Create group data item if not yet available\r\n            let groupDataItem = this.getPrivate(\"groupDataItem\");\r\n            if (!groupDataItem) {\r\n                const legend = this.get(\"legend\");\r\n                const categoryField = series.get(\"categoryField\", \"category\");\r\n                const valueField = series.get(\"valueField\", \"value\");\r\n                // Add slice\r\n                const groupSliceData = {};\r\n                groupSliceData[categoryField] = this.get(\"groupName\", \"\");\r\n                groupSliceData[valueField] = 0;\r\n                series.data.push(groupSliceData);\r\n                groupDataItem = series.dataItems[series.dataItems.length - 1];\r\n                groupDataItem.get(\"slice\").events.on(\"click\", () => {\r\n                    this.handleClick();\r\n                });\r\n                this.setPrivate(\"groupDataItem\", groupDataItem);\r\n                // Add to legend\r\n                if (legend) {\r\n                    legend.data.push(groupDataItem);\r\n                    //const legendDataItem = groupDataItem.get(\"legendDataItem\");\r\n                    groupDataItem.on(\"visible\", (visible) => {\r\n                        if (visible) {\r\n                            this.zoomOut();\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            // Recalculate group value and decorate small slices as necessary\r\n            const threshold = this.get(\"threshold\", 0);\r\n            const limit = this.get(\"limit\", 1000);\r\n            const normalDataItems = [];\r\n            const smallDataItems = [];\r\n            let groupValue = 0;\r\n            if (threshold || limit) {\r\n                _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(series.dataItems, (item, index) => {\r\n                    const legendDataItem = item.get(\"legendDataItem\");\r\n                    if (((item.get(\"valuePercentTotal\") <= threshold) || (index > (limit - 1))) && groupDataItem !== item) {\r\n                        groupValue += item.get(\"value\", 0);\r\n                        smallDataItems.push(item);\r\n                        item.hide(0);\r\n                        if (legendDataItem) {\r\n                            legendDataItem.get(\"itemContainer\").hide(0);\r\n                        }\r\n                    }\r\n                    else {\r\n                        normalDataItems.push(item);\r\n                        if (legendDataItem) {\r\n                            legendDataItem.get(\"itemContainer\").show(0);\r\n                        }\r\n                    }\r\n                });\r\n                this.setPrivate(\"normalDataItems\", normalDataItems);\r\n                this.setPrivate(\"smallDataItems\", smallDataItems);\r\n                this.updateGroupDataItem(groupValue);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Resets slice setup to original grouping state.\r\n     */\r\n    zoomOut() {\r\n        const groupDataItem = this.getPrivate(\"groupDataItem\");\r\n        if (groupDataItem) {\r\n            groupDataItem.show();\r\n        }\r\n        const clickBehavior = this.get(\"clickBehavior\");\r\n        if (clickBehavior == \"zoom\") {\r\n            const normalDataItems = this.getPrivate(\"normalDataItems\", []);\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(normalDataItems, (item, _index) => {\r\n                item.show();\r\n            });\r\n        }\r\n        const smallDataItems = this.getPrivate(\"smallDataItems\", []);\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(smallDataItems, (item, _index) => {\r\n            item.hide();\r\n        });\r\n        if (this.zoomOutButton) {\r\n            this.zoomOutButton.hide();\r\n        }\r\n    }\r\n    updateGroupDataItem(groupValue) {\r\n        const series = this.get(\"series\");\r\n        if (series) {\r\n            const groupSliceData = {};\r\n            const categoryField = series.get(\"categoryField\", \"category\");\r\n            const valueField = series.get(\"valueField\", \"value\");\r\n            groupSliceData[categoryField] = this.get(\"groupName\", \"\");\r\n            groupSliceData[valueField] = groupValue;\r\n            series.data.setIndex(series.data.length - 1, groupSliceData);\r\n            const groupDataItem = this.getPrivate(\"groupDataItem\");\r\n            if (groupValue == 0) {\r\n                groupDataItem.hide(0);\r\n            }\r\n            else if (groupDataItem.isHidden()) {\r\n                groupDataItem.show();\r\n            }\r\n            const clickBehavior = this.get(\"clickBehavior\");\r\n            if (clickBehavior != \"none\") {\r\n                groupDataItem.get(\"slice\").set(\"toggleKey\", \"none\");\r\n            }\r\n        }\r\n    }\r\n    handleClick() {\r\n        const clickBehavior = this.get(\"clickBehavior\");\r\n        const smallDataItems = this.getPrivate(\"smallDataItems\");\r\n        if (clickBehavior == \"none\" || (smallDataItems && smallDataItems.length == 0)) {\r\n            return;\r\n        }\r\n        const series = this.get(\"series\");\r\n        const groupDataItem = this.getPrivate(\"groupDataItem\");\r\n        // Hide group slice\r\n        groupDataItem.hide();\r\n        // Reveal small slices\r\n        _core_util_Array__WEBPACK_IMPORTED_MODULE_3__.each(series.dataItems, (item) => {\r\n            if (smallDataItems.indexOf(item) !== -1) {\r\n                item.show();\r\n            }\r\n            else if (clickBehavior == \"zoom\") {\r\n                item.hide();\r\n            }\r\n        });\r\n        this.zoomOutButton.show();\r\n    }\r\n    _beforeChanged() {\r\n        super._beforeChanged();\r\n        if (this.isDirty(\"series\")) {\r\n            const series = this.get(\"series\");\r\n            if (series) {\r\n                series.events.on(\"datavalidated\", (_ev) => {\r\n                    this.handleData();\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(SliceGrouper, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"SliceGrouper\"\r\n});\r\nObject.defineProperty(SliceGrouper, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_util_Entity__WEBPACK_IMPORTED_MODULE_0__.Entity.classNames.concat([SliceGrouper.className])\r\n});\r\n//# sourceMappingURL=SliceGrouper.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/plugins/sliceGrouper/SliceGrouper.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/plugins/sliceGrouper.js":
/*!******************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/plugins/sliceGrouper.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SliceGrouper: () => (/* reexport safe */ _internal_plugins_sliceGrouper_SliceGrouper__WEBPACK_IMPORTED_MODULE_0__.SliceGrouper)\n/* harmony export */ });\n/* harmony import */ var _internal_plugins_sliceGrouper_SliceGrouper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../.internal/plugins/sliceGrouper/SliceGrouper */ \"./node_modules/@amcharts/amcharts5/.internal/plugins/sliceGrouper/SliceGrouper.js\");\n\r\n//# sourceMappingURL=sliceGrouper.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/plugins/sliceGrouper.js?");

/***/ })

}]);