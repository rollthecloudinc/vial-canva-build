"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkcbdc_carbon_reporting_dashboard"] = self["webpackChunkcbdc_carbon_reporting_dashboard"] || []).push([["json_map"],{

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/map/MapPointSeries.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/map/MapPointSeries.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MapPointSeries: () => (/* binding */ MapPointSeries)\n/* harmony export */ });\n/* harmony import */ var _MapSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./MapSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapSeries.js\");\n/* harmony import */ var _core_util_Array__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/util/Array */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Array.js\");\n/* harmony import */ var _core_util_Type__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/util/Type */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Type.js\");\n/* harmony import */ var _core_util_Math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Math */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Math.js\");\n\r\n\r\n\r\n\r\n;\r\n/**\r\n * Creates a map series for displaying markers on the map.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/} for more info\r\n * @important\r\n */\r\nclass MapPointSeries extends _MapSeries__WEBPACK_IMPORTED_MODULE_0__.MapSeries {\r\n    constructor() {\r\n        super(...arguments);\r\n        Object.defineProperty(this, \"_types\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: [\"Point\", \"MultiPoint\"]\r\n        });\r\n        Object.defineProperty(this, \"_lineChangedDp\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n    }\r\n    _afterNew() {\r\n        this.fields.push(\"polygonId\", \"lineId\", \"longitude\", \"latitude\", \"fixed\");\r\n        super._afterNew();\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    markDirtyProjection() {\r\n        this.markDirty();\r\n    }\r\n    /**\r\n     * Forces a repaint of the element which relies on data.\r\n     *\r\n     * @since 5.0.21\r\n     */\r\n    markDirtyValues(dataItem) {\r\n        super.markDirtyValues();\r\n        if (dataItem) {\r\n            this._positionBullets(dataItem);\r\n        }\r\n    }\r\n    processDataItem(dataItem) {\r\n        super.processDataItem(dataItem);\r\n        let geometry = dataItem.get(\"geometry\");\r\n        if (!geometry) {\r\n            geometry = { type: \"Point\", coordinates: [dataItem.get(\"longitude\", 0), dataItem.get(\"latitude\", 0)] };\r\n            dataItem.set(\"geometry\", geometry);\r\n        }\r\n        else {\r\n            if (geometry.type == \"Point\") {\r\n                const coordinates = geometry.coordinates;\r\n                if (coordinates) {\r\n                    dataItem.set(\"longitude\", coordinates[0]);\r\n                    dataItem.set(\"latitude\", coordinates[1]);\r\n                }\r\n            }\r\n            else if (geometry.type == \"MultiPoint\") {\r\n                const coordinates = geometry.coordinates;\r\n                if (coordinates && coordinates[0]) {\r\n                    dataItem.set(\"longitude\", coordinates[0][0]);\r\n                    dataItem.set(\"latitude\", coordinates[0][1]);\r\n                }\r\n            }\r\n        }\r\n        this._addGeometry(geometry, this);\r\n    }\r\n    _makeBullets(dataItem) {\r\n        dataItem.bullets = [];\r\n        this.bullets.each((bulletFunction) => {\r\n            const geometry = dataItem.get(\"geometry\");\r\n            if (geometry) {\r\n                if (geometry.type == \"Point\") {\r\n                    this._setBulletParent(this._makeBullet(dataItem, bulletFunction));\r\n                }\r\n                else if (geometry.type = \"MultiPoint\") {\r\n                    let i = 0;\r\n                    _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(geometry.coordinates, () => {\r\n                        this._setBulletParent(this._makeBullet(dataItem, bulletFunction, i));\r\n                        i++;\r\n                    });\r\n                }\r\n            }\r\n        });\r\n    }\r\n    _setBulletParent(bullet) {\r\n        if (bullet) {\r\n            const sprite = bullet.get(\"sprite\");\r\n            const chart = this.chart;\r\n            if (sprite && chart) {\r\n                const dataItem = sprite.dataItem;\r\n                if (dataItem) {\r\n                    if (dataItem.get(\"fixed\")) {\r\n                        if (sprite.parent != chart.bulletsContainer) {\r\n                            chart.bulletsContainer.children.moveValue(sprite);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (sprite.parent != this.bulletsContainer) {\r\n                            this.bulletsContainer.children.moveValue(sprite);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _positionBullet(bullet) {\r\n        const sprite = bullet.get(\"sprite\");\r\n        if (sprite) {\r\n            const dataItem = sprite.dataItem;\r\n            if (dataItem && dataItem.get(\"fixed\")) {\r\n                return;\r\n            }\r\n            const latitude = dataItem.get(\"latitude\");\r\n            const longitude = dataItem.get(\"longitude\");\r\n            const lineDataItem = dataItem.get(\"lineDataItem\");\r\n            const fixed = dataItem.get(\"fixed\");\r\n            const chart = this.chart;\r\n            let line;\r\n            if (lineDataItem) {\r\n                line = lineDataItem.get(\"mapLine\");\r\n            }\r\n            else {\r\n                const lineId = dataItem.get(\"lineId\");\r\n                if (lineId && chart) {\r\n                    chart.series.each((series) => {\r\n                        if (series.isType(\"MapLineSeries\")) {\r\n                            let lineDI = series.getDataItemById(lineId);\r\n                            if (lineDI) {\r\n                                dataItem.set(\"lineDataItem\", lineDI);\r\n                                line = lineDI.get(\"mapLine\");\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            if (this._lineChangedDp) {\r\n                this._lineChangedDp.dispose();\r\n            }\r\n            if (line) {\r\n                this._lineChangedDp = line.events.on(\"linechanged\", () => {\r\n                    this._positionBullets(dataItem);\r\n                });\r\n            }\r\n            const polygonDataItem = dataItem.get(\"polygonDataItem\");\r\n            let polygon;\r\n            if (polygonDataItem) {\r\n                polygon = polygonDataItem.get(\"mapPolygon\");\r\n            }\r\n            else {\r\n                const polygonId = dataItem.get(\"polygonId\");\r\n                if (polygonId && chart) {\r\n                    chart.series.each((series) => {\r\n                        if (series.isType(\"MapPolygonSeries\")) {\r\n                            let polygonDI = series.getDataItemById(polygonId);\r\n                            if (polygonDI) {\r\n                                dataItem.set(\"polygonDataItem\", polygonDI);\r\n                                polygon = polygonDI.get(\"mapPolygon\");\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            const positionOnLine = dataItem.get(\"positionOnLine\");\r\n            let coordinates;\r\n            let angle;\r\n            if (polygon) {\r\n                let geoPoint = polygon.visualCentroid();\r\n                coordinates = [geoPoint.longitude, geoPoint.latitude];\r\n                dataItem.setRaw(\"longitude\", geoPoint.longitude);\r\n                dataItem.setRaw(\"latitude\", geoPoint.latitude);\r\n            }\r\n            else if (line && _core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(positionOnLine)) {\r\n                let geoPoint = line.positionToGeoPoint(positionOnLine);\r\n                coordinates = [geoPoint.longitude, geoPoint.latitude];\r\n                if (dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\")) && chart) {\r\n                    const geoPoint0 = line.positionToGeoPoint(positionOnLine - 0.002);\r\n                    const geoPoint1 = line.positionToGeoPoint(positionOnLine + 0.002);\r\n                    const point0 = chart.convert(geoPoint0);\r\n                    const point1 = chart.convert(geoPoint1);\r\n                    //dataItem.set(\"autoRotateAngle\", $math.getAngle(point0, point1));\r\n                    angle = _core_util_Math__WEBPACK_IMPORTED_MODULE_3__.getAngle(point0, point1);\r\n                }\r\n                dataItem.setRaw(\"longitude\", geoPoint.longitude);\r\n                dataItem.setRaw(\"latitude\", geoPoint.latitude);\r\n            }\r\n            else if (_core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(longitude) && _core_util_Type__WEBPACK_IMPORTED_MODULE_2__.isNumber(latitude)) {\r\n                coordinates = [longitude, latitude];\r\n            }\r\n            else {\r\n                const geometry = dataItem.get(\"geometry\");\r\n                if (geometry) {\r\n                    if (geometry.type == \"Point\") {\r\n                        this._positionBulletReal(bullet, geometry, geometry.coordinates, angle);\r\n                    }\r\n                    else if (geometry.type == \"MultiPoint\") {\r\n                        let index = bullet._index || 0;\r\n                        coordinates = geometry.coordinates[index];\r\n                    }\r\n                }\r\n            }\r\n            if (!fixed && coordinates) {\r\n                this._positionBulletReal(bullet, { type: \"Point\", coordinates: coordinates }, coordinates, angle);\r\n            }\r\n        }\r\n    }\r\n    _positionBulletReal(bullet, geometry, coordinates, angle) {\r\n        const sprite = bullet.get(\"sprite\");\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            const projection = chart.get(\"projection\");\r\n            const geoPath = chart.getPrivate(\"geoPath\");\r\n            const dataItem = sprite.dataItem;\r\n            const xy = projection(coordinates);\r\n            if (xy) {\r\n                sprite.setAll({ x: xy[0], y: xy[1] });\r\n            }\r\n            let visible = true;\r\n            if (geoPath(geometry)) {\r\n                if (this.get(\"clipFront\")) {\r\n                    visible = false;\r\n                }\r\n            }\r\n            else {\r\n                if (this.get(\"clipBack\")) {\r\n                    visible = false;\r\n                }\r\n            }\r\n            sprite.setPrivate(\"visible\", visible);\r\n            if (dataItem && angle != null && dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\"))) {\r\n                sprite.set(\"rotation\", angle + dataItem.get(\"autoRotateAngle\", bullet.get(\"autoRotateAngle\", 0)));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Centers the map to specific series' data item and zooms to the level\r\n     * specified in the parameters.\r\n     *\r\n     * @param  dataItem   Map point\r\n     * @param  zoomLevel  Zoom level\r\n     * @param  rotate If it's true, the map will rotate so that this point would be in the center. Mostly usefull with geoOrthographic projection.\r\n     */\r\n    zoomToDataItem(dataItem, zoomLevel, rotate) {\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            const longitude = dataItem.get(\"longitude\", 0);\r\n            const latitude = dataItem.get(\"latitude\", 0);\r\n            if (rotate) {\r\n                return chart.zoomToGeoPoint({ longitude: longitude, latitude: latitude }, zoomLevel, true, undefined, -longitude, -latitude);\r\n            }\r\n            return chart.zoomToGeoPoint({ longitude: longitude, latitude: latitude }, zoomLevel, true);\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    disposeDataItem(dataItem) {\r\n        const chart = this.chart;\r\n        if (chart) {\r\n            chart.series.each((series) => {\r\n                if (series.isType(\"MapLineSeries\")) {\r\n                    _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(series.dataItems, (di) => {\r\n                        const pointsToConnect = di.get(\"pointsToConnect\");\r\n                        if (pointsToConnect) {\r\n                            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(pointsToConnect, (point) => {\r\n                                if (point == dataItem) {\r\n                                    _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.remove(pointsToConnect, point);\r\n                                    series.markDirtyValues(di);\r\n                                }\r\n                            });\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        super.disposeDataItem(dataItem);\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _excludeDataItem(dataItem) {\r\n        super._excludeDataItem(dataItem);\r\n        const bullets = dataItem.bullets;\r\n        if (bullets) {\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(bullets, (bullet) => {\r\n                const sprite = bullet.get(\"sprite\");\r\n                if (sprite) {\r\n                    sprite.setPrivate(\"visible\", false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _unexcludeDataItem(dataItem) {\r\n        super._unexcludeDataItem(dataItem);\r\n        const bullets = dataItem.bullets;\r\n        if (bullets) {\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(bullets, (bullet) => {\r\n                const sprite = bullet.get(\"sprite\");\r\n                if (sprite) {\r\n                    sprite.setPrivate(\"visible\", true);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _notIncludeDataItem(dataItem) {\r\n        super._notIncludeDataItem(dataItem);\r\n        const bullets = dataItem.bullets;\r\n        if (bullets) {\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(bullets, (bullet) => {\r\n                const sprite = bullet.get(\"sprite\");\r\n                if (sprite) {\r\n                    sprite.setPrivate(\"visible\", false);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @ignore\r\n     */\r\n    _unNotIncludeDataItem(dataItem) {\r\n        super._unNotIncludeDataItem(dataItem);\r\n        const bullets = dataItem.bullets;\r\n        if (bullets) {\r\n            _core_util_Array__WEBPACK_IMPORTED_MODULE_1__.each(bullets, (bullet) => {\r\n                const sprite = bullet.get(\"sprite\");\r\n                if (sprite) {\r\n                    sprite.setPrivate(\"visible\", true);\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(MapPointSeries, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"MapPointSeries\"\r\n});\r\nObject.defineProperty(MapPointSeries, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _MapSeries__WEBPACK_IMPORTED_MODULE_0__.MapSeries.classNames.concat([MapPointSeries.className])\r\n});\r\n//# sourceMappingURL=MapPointSeries.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/map/MapPointSeries.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/.internal/charts/map/ZoomControl.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/.internal/charts/map/ZoomControl.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ZoomControl: () => (/* binding */ ZoomControl)\n/* harmony export */ });\n/* harmony import */ var _core_render_Container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/render/Container */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Container.js\");\n/* harmony import */ var _core_render_Button__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/render/Button */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Button.js\");\n/* harmony import */ var _core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/render/Graphics */ \"./node_modules/@amcharts/amcharts5/.internal/core/render/Graphics.js\");\n/* harmony import */ var _core_util_Disposer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/util/Disposer */ \"./node_modules/@amcharts/amcharts5/.internal/core/util/Disposer.js\");\n\r\n\r\n\r\n\r\n/**\r\n * A control that displays button for zooming [[MapChart]] in and out.\r\n *\r\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control} for more information\r\n * @important\r\n */\r\nclass ZoomControl extends _core_render_Container__WEBPACK_IMPORTED_MODULE_0__.Container {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * A [[Button]] for zoom in.\r\n         *\r\n         * @default Button.new()\r\n         */\r\n        Object.defineProperty(this, \"plusButton\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(_core_render_Button__WEBPACK_IMPORTED_MODULE_1__.Button.new(this._root, { width: 36, height: 36, themeTags: [\"plus\"] }))\r\n        });\r\n        /**\r\n         * A [[Button]] for zoom out.\r\n         *\r\n         * @default Button.new()\r\n         */\r\n        Object.defineProperty(this, \"minusButton\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: this.children.push(_core_render_Button__WEBPACK_IMPORTED_MODULE_1__.Button.new(this._root, { width: 36, height: 36, themeTags: [\"minus\"] }))\r\n        });\r\n        Object.defineProperty(this, \"_disposer\", {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: true,\r\n            value: void 0\r\n        });\r\n    }\r\n    _afterNew() {\r\n        super._afterNew();\r\n        this.set(\"position\", \"absolute\");\r\n        this.set(\"layout\", this._root.verticalLayout);\r\n        this.set(\"themeTags\", [\"zoomcontrol\"]);\r\n        this.plusButton.setAll({\r\n            icon: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics.new(this._root, { themeTags: [\"icon\"] }),\r\n            layout: undefined\r\n        });\r\n        this.minusButton.setAll({\r\n            icon: _core_render_Graphics__WEBPACK_IMPORTED_MODULE_2__.Graphics.new(this._root, { themeTags: [\"icon\"] }),\r\n            layout: undefined\r\n        });\r\n    }\r\n    _prepareChildren() {\r\n        super._prepareChildren();\r\n        if (this.isPrivateDirty(\"chart\")) {\r\n            const chart = this.getPrivate(\"chart\");\r\n            const previous = this._prevPrivateSettings.chart;\r\n            if (chart) {\r\n                this._disposer = new _core_util_Disposer__WEBPACK_IMPORTED_MODULE_3__.MultiDisposer([\r\n                    this.plusButton.events.on(\"click\", () => {\r\n                        chart.zoomIn();\r\n                    }),\r\n                    this.minusButton.events.on(\"click\", () => {\r\n                        chart.zoomOut();\r\n                    })\r\n                ]);\r\n            }\r\n            if (previous && this._disposer) {\r\n                this._disposer.dispose();\r\n            }\r\n        }\r\n    }\r\n}\r\nObject.defineProperty(ZoomControl, \"className\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: \"ZoomControl\"\r\n});\r\nObject.defineProperty(ZoomControl, \"classNames\", {\r\n    enumerable: true,\r\n    configurable: true,\r\n    writable: true,\r\n    value: _core_render_Container__WEBPACK_IMPORTED_MODULE_0__.Container.classNames.concat([ZoomControl.className])\r\n});\r\n//# sourceMappingURL=ZoomControl.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/.internal/charts/map/ZoomControl.js?");

/***/ }),

/***/ "./node_modules/@amcharts/amcharts5/map.js":
/*!*************************************************!*\
  !*** ./node_modules/@amcharts/amcharts5/map.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DefaultTheme: () => (/* reexport safe */ _internal_charts_map_MapChartDefaultTheme__WEBPACK_IMPORTED_MODULE_16__.MapChartDefaultTheme),\n/* harmony export */   GraticuleSeries: () => (/* reexport safe */ _internal_charts_map_GraticuleSeries__WEBPACK_IMPORTED_MODULE_0__.GraticuleSeries),\n/* harmony export */   MapChart: () => (/* reexport safe */ _internal_charts_map_MapChart__WEBPACK_IMPORTED_MODULE_1__.MapChart),\n/* harmony export */   MapLine: () => (/* reexport safe */ _internal_charts_map_MapLine__WEBPACK_IMPORTED_MODULE_2__.MapLine),\n/* harmony export */   MapLineSeries: () => (/* reexport safe */ _internal_charts_map_MapLineSeries__WEBPACK_IMPORTED_MODULE_3__.MapLineSeries),\n/* harmony export */   MapPointSeries: () => (/* reexport safe */ _internal_charts_map_MapPointSeries__WEBPACK_IMPORTED_MODULE_4__.MapPointSeries),\n/* harmony export */   MapPolygon: () => (/* reexport safe */ _internal_charts_map_MapPolygon__WEBPACK_IMPORTED_MODULE_5__.MapPolygon),\n/* harmony export */   MapPolygonSeries: () => (/* reexport safe */ _internal_charts_map_MapPolygonSeries__WEBPACK_IMPORTED_MODULE_6__.MapPolygonSeries),\n/* harmony export */   MapSeries: () => (/* reexport safe */ _internal_charts_map_MapSeries__WEBPACK_IMPORTED_MODULE_7__.MapSeries),\n/* harmony export */   ZoomControl: () => (/* reexport safe */ _internal_charts_map_ZoomControl__WEBPACK_IMPORTED_MODULE_8__.ZoomControl),\n/* harmony export */   geoAlbersUsa: () => (/* reexport safe */ d3_geo__WEBPACK_IMPORTED_MODULE_13__[\"default\"]),\n/* harmony export */   geoEqualEarth: () => (/* reexport safe */ d3_geo__WEBPACK_IMPORTED_MODULE_14__[\"default\"]),\n/* harmony export */   geoEquirectangular: () => (/* reexport safe */ d3_geo__WEBPACK_IMPORTED_MODULE_12__[\"default\"]),\n/* harmony export */   geoMercator: () => (/* reexport safe */ d3_geo__WEBPACK_IMPORTED_MODULE_10__[\"default\"]),\n/* harmony export */   geoNaturalEarth1: () => (/* reexport safe */ d3_geo__WEBPACK_IMPORTED_MODULE_15__[\"default\"]),\n/* harmony export */   geoOrthographic: () => (/* reexport safe */ d3_geo__WEBPACK_IMPORTED_MODULE_11__[\"default\"]),\n/* harmony export */   getGeoArea: () => (/* reexport safe */ _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__.getGeoArea),\n/* harmony export */   getGeoBounds: () => (/* reexport safe */ _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__.getGeoBounds),\n/* harmony export */   getGeoCentroid: () => (/* reexport safe */ _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__.getGeoCentroid),\n/* harmony export */   getGeoCircle: () => (/* reexport safe */ _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__.getGeoCircle),\n/* harmony export */   getGeoRectangle: () => (/* reexport safe */ _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__.getGeoRectangle),\n/* harmony export */   normalizeGeoPoint: () => (/* reexport safe */ _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__.normalizeGeoPoint)\n/* harmony export */ });\n/* harmony import */ var _internal_charts_map_GraticuleSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./.internal/charts/map/GraticuleSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/GraticuleSeries.js\");\n/* harmony import */ var _internal_charts_map_MapChart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./.internal/charts/map/MapChart */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapChart.js\");\n/* harmony import */ var _internal_charts_map_MapLine__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./.internal/charts/map/MapLine */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapLine.js\");\n/* harmony import */ var _internal_charts_map_MapLineSeries__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./.internal/charts/map/MapLineSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapLineSeries.js\");\n/* harmony import */ var _internal_charts_map_MapPointSeries__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./.internal/charts/map/MapPointSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapPointSeries.js\");\n/* harmony import */ var _internal_charts_map_MapPolygon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./.internal/charts/map/MapPolygon */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapPolygon.js\");\n/* harmony import */ var _internal_charts_map_MapPolygonSeries__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./.internal/charts/map/MapPolygonSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapPolygonSeries.js\");\n/* harmony import */ var _internal_charts_map_MapSeries__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./.internal/charts/map/MapSeries */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapSeries.js\");\n/* harmony import */ var _internal_charts_map_ZoomControl__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./.internal/charts/map/ZoomControl */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/ZoomControl.js\");\n/* harmony import */ var _internal_charts_map_MapUtils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./.internal/charts/map/MapUtils */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapUtils.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! d3-geo */ \"./node_modules/d3-geo/src/projection/mercator.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! d3-geo */ \"./node_modules/d3-geo/src/projection/orthographic.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! d3-geo */ \"./node_modules/d3-geo/src/projection/equirectangular.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! d3-geo */ \"./node_modules/d3-geo/src/projection/albersUsa.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! d3-geo */ \"./node_modules/d3-geo/src/projection/equalEarth.js\");\n/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! d3-geo */ \"./node_modules/d3-geo/src/projection/naturalEarth1.js\");\n/* harmony import */ var _internal_charts_map_MapChartDefaultTheme__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./.internal/charts/map/MapChartDefaultTheme */ \"./node_modules/@amcharts/amcharts5/.internal/charts/map/MapChartDefaultTheme.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=map.js.map\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/@amcharts/amcharts5/map.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/albers.js":
/*!******************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/albers.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _conicEqualArea_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./conicEqualArea.js */ \"./node_modules/d3-geo/src/projection/conicEqualArea.js\");\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  return (0,_conicEqualArea_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/albers.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/albersUsa.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/albersUsa.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n/* harmony import */ var _albers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./albers.js */ \"./node_modules/d3-geo/src/projection/albers.js\");\n/* harmony import */ var _conicEqualArea_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./conicEqualArea.js */ \"./node_modules/d3-geo/src/projection/conicEqualArea.js\");\n/* harmony import */ var _fit_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fit.js */ \"./node_modules/d3-geo/src/projection/fit.js\");\n\n\n\n\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  var cache,\n      cacheStream,\n      lower48 = (0,_albers_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(), lower48Point,\n      alaska = (0,_conicEqualArea_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = (0,_conicEqualArea_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon, y + 0.120 * k + _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon], [x - 0.214 * k - _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon, y + 0.234 * k - _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon, y + 0.166 * k + _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon], [x - 0.115 * k - _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon, y + 0.234 * k - _math_js__WEBPACK_IMPORTED_MODULE_2__.epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return (0,_fit_js__WEBPACK_IMPORTED_MODULE_3__.fitExtent)(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return (0,_fit_js__WEBPACK_IMPORTED_MODULE_3__.fitSize)(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return (0,_fit_js__WEBPACK_IMPORTED_MODULE_3__.fitWidth)(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return (0,_fit_js__WEBPACK_IMPORTED_MODULE_3__.fitHeight)(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/albersUsa.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/azimuthal.js":
/*!*********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/azimuthal.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   azimuthalInvert: () => (/* binding */ azimuthalInvert),\n/* harmony export */   azimuthalRaw: () => (/* binding */ azimuthalRaw)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n\n\nfunction azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(x),\n        cy = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(x),\n      k * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(y)\n    ];\n  }\n}\n\nfunction azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(x * x + y * y),\n        c = angle(z),\n        sc = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(c),\n        cc = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(c);\n    return [\n      (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.atan2)(x * sc, z * cc),\n      (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)(z && y * sc / z)\n    ];\n  }\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/azimuthal.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/conic.js":
/*!*****************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/conic.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conicProjection: () => (/* binding */ conicProjection)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./node_modules/d3-geo/src/projection/index.js\");\n\n\n\nfunction conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = _math_js__WEBPACK_IMPORTED_MODULE_0__.pi / 3,\n      m = (0,_index_js__WEBPACK_IMPORTED_MODULE_1__.projectionMutator)(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * _math_js__WEBPACK_IMPORTED_MODULE_0__.radians, phi1 = _[1] * _math_js__WEBPACK_IMPORTED_MODULE_0__.radians) : [phi0 * _math_js__WEBPACK_IMPORTED_MODULE_0__.degrees, phi1 * _math_js__WEBPACK_IMPORTED_MODULE_0__.degrees];\n  };\n\n  return p;\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/conic.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/conicEqualArea.js":
/*!**************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/conicEqualArea.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   conicEqualAreaRaw: () => (/* binding */ conicEqualAreaRaw),\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n/* harmony import */ var _conic_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./conic.js */ \"./node_modules/d3-geo/src/projection/conic.js\");\n/* harmony import */ var _cylindricalEqualArea_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cylindricalEqualArea.js */ \"./node_modules/d3-geo/src/projection/cylindricalEqualArea.js\");\n\n\n\n\nfunction conicEqualAreaRaw(y0, y1) {\n  var sy0 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(y0), n = (sy0 + (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if ((0,_math_js__WEBPACK_IMPORTED_MODULE_0__.abs)(n) < _math_js__WEBPACK_IMPORTED_MODULE_0__.epsilon) return (0,_cylindricalEqualArea_js__WEBPACK_IMPORTED_MODULE_1__.cylindricalEqualAreaRaw)(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(c) / n;\n\n  function project(x, y) {\n    var r = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(c - 2 * n * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(y)) / n;\n    return [r * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(x *= n), r0 - r * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.atan2)(x, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.abs)(r0y)) * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sign)(r0y);\n    if (r0y * n < 0)\n      l -= _math_js__WEBPACK_IMPORTED_MODULE_0__.pi * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sign)(x) * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sign)(r0y);\n    return [l / n, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  return (0,_conic_js__WEBPACK_IMPORTED_MODULE_2__.conicProjection)(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/conicEqualArea.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/cylindricalEqualArea.js":
/*!********************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/cylindricalEqualArea.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cylindricalEqualAreaRaw: () => (/* binding */ cylindricalEqualAreaRaw)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n\n\nfunction cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)(y * cosPhi0)];\n  };\n\n  return forward;\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/cylindricalEqualArea.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/equalEarth.js":
/*!**********************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/equalEarth.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   equalEarthRaw: () => (/* binding */ equalEarthRaw)\n/* harmony export */ });\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./index.js */ \"./node_modules/d3-geo/src/projection/index.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n\n\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sqrt)(3) / 2,\n    iterations = 12;\n\nfunction equalEarthRaw(lambda, phi) {\n  var l = (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)(M * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if ((0,_math_js__WEBPACK_IMPORTED_MODULE_0__.abs)(delta) < _math_js__WEBPACK_IMPORTED_MODULE_0__.epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(l),\n    (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.asin)((0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(l) / M)\n  ];\n};\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  return (0,_index_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(equalEarthRaw)\n      .scale(177.158);\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/equalEarth.js?");

/***/ }),

/***/ "./node_modules/d3-geo/src/projection/orthographic.js":
/*!************************************************************!*\
  !*** ./node_modules/d3-geo/src/projection/orthographic.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   orthographicRaw: () => (/* binding */ orthographicRaw)\n/* harmony export */ });\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../math.js */ \"./node_modules/d3-geo/src/math.js\");\n/* harmony import */ var _azimuthal_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./azimuthal.js */ \"./node_modules/d3-geo/src/projection/azimuthal.js\");\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./index.js */ \"./node_modules/d3-geo/src/projection/index.js\");\n\n\n\n\nfunction orthographicRaw(x, y) {\n  return [(0,_math_js__WEBPACK_IMPORTED_MODULE_0__.cos)(y) * (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(x), (0,_math_js__WEBPACK_IMPORTED_MODULE_0__.sin)(y)];\n}\n\northographicRaw.invert = (0,_azimuthal_js__WEBPACK_IMPORTED_MODULE_1__.azimuthalInvert)(_math_js__WEBPACK_IMPORTED_MODULE_0__.asin);\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  return (0,_index_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + _math_js__WEBPACK_IMPORTED_MODULE_0__.epsilon);\n}\n\n\n//# sourceURL=webpack://cbdc-carbon-reporting-dashboard/./node_modules/d3-geo/src/projection/orthographic.js?");

/***/ })

}]);